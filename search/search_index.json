{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stemmer"]},"docs":[{"location":"","title":"Material for MkDocs","text":"<p>Welcome to my Knowledge Base.</p>"},{"location":"blog/","title":"\u535a\u5ba2","text":""},{"location":"blog/2023/11/30/adding-a-badge-to-your-project/","title":"Adding a  badge to your project","text":"<p>You enjoy working with Material for MkDocs? Share the love! You can now add a badge to your project's README, showing that your project is built with Material for MkDocs.</p> <p>Material for MkDocs' logo was just added to Simple Icons, which is used by Shields.io to include logos in badges. We generated a badge for you, which you can add to your project's README:</p> <p></p>"},{"location":"blog/2023/11/30/adding-a-badge-to-your-project/#usage","title":"Usage","text":"<p>Just copy the following snippet and paste it into your project's <code>README.md</code>:</p> <pre><code>[![Built with Material for MkDocs](https://img.shields.io/badge/Material_for_MkDocs-526CFE?style=for-the-badge&amp;logo=MaterialForMkDocs&amp;logoColor=white)](https://squidfunk.github.io/mkdocs-material/)\n</code></pre>"},{"location":"blog/2022/09/12/blog-support-just-landed/","title":"Blog support just landed","text":"<p>Hey there! You're looking at our new blog, built with the brand new built-in blog plugin. With this plugin, you can easily build a blog alongside your documentation or standalone.</p> <p>Proper support for blogging, as requested by many users over the past few years, was something that was desperately missing from Material for MkDocs' feature set. While everybody agreed that blogging support was a blind spot, it was not obvious whether MkDocs could be extended in a way to allow for blogging as we know it from Jekyll and friends. The built-in blog plugin proves that it is, after all, possible to build a blogging engine on top of MkDocs, in order to create a technical blog alongside your documentation, or as the main thing.</p> <p>This article explains how to build a standalone blog with Material for MkDocs. If you want to build a blog alongside your documentation, please refer to the plugin's documentation.</p>"},{"location":"blog/2022/09/12/blog-support-just-landed/#quick-start","title":"Quick start","text":""},{"location":"blog/2022/09/12/blog-support-just-landed/#creating-a-standalone-blog","title":"Creating a standalone blog","text":"<p>You can bootstrap a new project using the <code>mkdocs</code> executable:</p> <pre><code>mkdocs new .\n</code></pre> <p>This will create the following structure:</p> <pre><code>.\n\u251c\u2500 docs/\n\u2502  \u2514\u2500 index.md\n\u2514\u2500 mkdocs.yml\n</code></pre>"},{"location":"blog/2022/09/12/blog-support-just-landed/#configuration","title":"Configuration","text":"<p>In this article, we're going to build a standalone blog, which means that the blog lives at the root of your project. For this reason, open <code>mkdocs.yml</code>, and replace its contents with:</p> <pre><code>site_name: My Blog\ntheme:\n  name: material\n  features:\n    - navigation.sections\nplugins:\n  - blog:\n      blog_dir: . # (1)!\n  - search\n  - tags\nnav:\n  - index.md\n</code></pre> <ol> <li>This is the important part \u2013 we're hosting the blog at the root of the     project, and not in a subdirectory. For more information, see the     <code>blog_dir</code> configuration option.</li> </ol>"},{"location":"blog/2022/09/12/blog-support-just-landed/#blog-setup","title":"Blog setup","text":"<p>The blog index page lives in <code>docs/index.md</code>. This page was pre-filled by MkDocs with some content, so we're going to replace it with what we need to bootstrap the blog:</p> <pre><code># Blog\n</code></pre> <p>That's it.</p>"},{"location":"blog/2022/09/12/blog-support-just-landed/#writing-your-first-post","title":"Writing your first post","text":"<p>Now that we have set up the built-in blog plugin, we can start writing our first post. All blog posts are written with the exact same Markdown flavor as already included with Material for MkDocs. First, create a folder called <code>posts</code> with a file called <code>hello-world.md</code>:</p> <pre><code>.\n\u251c\u2500 docs/\n\u2502  \u251c\u2500 posts/\n\u2502  \u2502  \u2514\u2500 hello-world.md # (1)!\n\u2502  \u2514\u2500 index.md\n\u2514\u2500 mkdocs.yml\n</code></pre> <ol> <li>If you'd like to arrange posts differently, you're free to do so. The URLs     are built from the format specified in <code>post_url_format</code> and     the titles and dates of posts, no matter how they are organized     inside the <code>posts</code> directory.</li> </ol> <p>Then, open up <code>hello-world.md</code>, and add the following lines:</p> <pre><code>---\ndraft: true # (1)!\ndate: 2022-01-31\ncategories:\n  - Hello\n  - World\n---\n\n# Hello world!\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque nec\nmaximus ex. Sed consequat, nulla quis malesuada dapibus, elit metus vehicula\nerat, ut egestas tellus eros at risus. In hac habitasse platea dictumst.\nPhasellus id lacus pulvinar erat consequat pretium. Morbi malesuada arcu mauris\nNam vel justo sem. Nam placerat purus non varius luctus. Integer pretium leo in\nsem rhoncus, quis gravida orci mollis. Proin id aliquam est. Vivamus in nunc ac\nmetus tristique pellentesque. Suspendisse viverra urna in accumsan aliquet.\n\n&lt;!-- more --&gt;\n\nDonec volutpat, elit ac volutpat laoreet, turpis dolor semper nibh, et dictum\nmassa ex pulvinar elit. Curabitur commodo sit amet dolor sed mattis. Etiam\ntempor odio eu nisi gravida cursus. Maecenas ante enim, fermentum sit amet\nmolestie nec, mollis ac libero. Vivamus sagittis suscipit eros ut luctus.\n\nNunc vehicula sagittis condimentum. Cras facilisis bibendum lorem et feugiat.\nIn auctor accumsan ligula, at consectetur erat commodo quis. Morbi ac nunc\npharetra, pellentesque risus in, consectetur urna. Nulla id enim facilisis\narcu tincidunt pulvinar. Vestibulum laoreet risus scelerisque porta congue.\nIn velit purus, dictum quis neque nec, molestie viverra risus. Nam pellentesque\ntellus id elit ultricies, vel finibus erat cursus.\n</code></pre> <ol> <li>If you mark a post as a draft, a red marker appears next to the post date     on index pages. When the site is built, drafts are not included in the     output. This behavior can be changed, e.g. for rendering drafts when     building deploy previews.</li> </ol> <p>When you spin up the live preview server, you should be greeted by your first post! You'll also realize, that archive and category indexes have been automatically generated for you:</p> <p></p> <p>However, this is just the start. The built-in blog plugin packs a lot of functionality needed in day-to-day blogging. Visit the documentation of the plugin to learn about the following topics:</p> <ul> <li>Adding an excerpt</li> <li>Adding authors</li> <li>Adding categories</li> <li>Adding tags</li> <li>Adding related links</li> <li>Linking from and to posts</li> <li>Setting the reading time</li> <li>Setting defaults</li> </ul> <p>Additionally, the built-in blog plugin has dozens of configuration options which allow for fine-tuning the output. You can configure post slugs, general behavior and much more.</p>"},{"location":"blog/2022/09/12/blog-support-just-landed/#whats-next","title":"What's next?","text":"<p>Getting basic blogging support out the door was quite a challenge \u2013 the built-in blog plugin is probably the biggest release this year and already packs a lot of functionality. However, Material for MkDocs is used in many different contexts, which is why we'd expect to iterate, as always.</p> <p>Some ideas already proposed by users:</p> <ul> <li> <p>Blog series: Authors should be able to create so called blog series and   assign posts to a blog series using simple identifiers. For each post that is   part of a series, a list with links to all other posts should be included in   the post's content.</p> </li> <li> <p>Author indexes: Besides archive and category indexes, authors should   be able to create per-author indexes, which list all posts linked to an   author. Additionally, a profile should be created for each author and linked   from posts.</p> </li> <li> <p>Social share buttons: It should be easy to share blog posts via social   media or other ways. For this reason, it should be possible to automatically   include social sharing buttons with each post.</p> </li> </ul> <p>What's still missing from the brand new built-in blog plugin? Feel free to share your ideas in the comments. Together, we can build one of the best modern engines for technical blogging!</p>"},{"location":"blog/2022/05/05/chinese-search-support/","title":"Chinese search support \u2013 \u4e2d\u6587\u641c\u7d22\u200b\u652f\u6301","text":"<p>Insiders adds experimental Chinese language support for the built-in search plugin \u2013 a feature that has been requested for a long time given the large number of Chinese users.</p> <p>After the United States and Germany, the third-largest country of origin of Material for MkDocs users is China. For a long time, the built-in search plugin didn't allow for proper segmentation of Chinese characters, mainly due to missing support in lunr-languages which is used for search tokenization and stemming. The latest Insiders release adds long-awaited Chinese language support for the built-in search plugin, something that has been requested by many users.</p> <p>Material for MkDocs\u7d42\u65bc\u200b\u652f\u6301\u200b\u4e2d\u6587\u200b\u4e86\uff01\u6587\u672c\u200b\u88ab\u200b\u6b63\u78ba\u200b\u5206\u5272\u200b\u4e26\u4e14\u200b\u66f4\u200b\u5bb9\u6613\u200b\u627e\u5230\u3002</p> <p>This article explains how to set up Chinese language support for the built-in search plugin in a few minutes.</p>"},{"location":"blog/2022/05/05/chinese-search-support/#configuration","title":"Configuration","text":"<p>Chinese language support for Material for MkDocs is provided by jieba, an excellent Chinese text segmentation library. If jieba is installed, the built-in search plugin automatically detects Chinese characters and runs them through the segmenter. You can install jieba with:</p> <pre><code>pip install jieba\n</code></pre> <p>The next step is only required if you specified the <code>separator</code> configuration in <code>mkdocs.yml</code>. Text is segmented with zero-width whitespace characters, so it renders exactly the same in the search modal. Adjust <code>mkdocs.yml</code> so that the <code>separator</code> includes the <code>\\u200b</code> character:</p> <pre><code>plugins:\n  - search:\n      separator: '[\\s\\u200b\\-]'\n</code></pre> <p>That's all that is necessary.</p>"},{"location":"blog/2022/05/05/chinese-search-support/#usage","title":"Usage","text":"<p>If you followed the instructions in the configuration guide, Chinese words will now be tokenized using jieba. Try searching for  \u652f\u6301 to see how it integrates with the built-in search plugin.</p> <p>Note that this is an experimental feature, and I, @squidfunk, am not proficient in Chinese (yet?). If you find a bug or think something can be improved, please open an issue.</p>"},{"location":"blog/2021/09/26/excluding-content-from-search/","title":"Excluding content from search","text":"<p>The latest Insiders release brings three new simple ways to exclude dedicated parts of a document from the search index, allowing for more fine-grained control.</p> <p>Two weeks ago, Material for MkDocs Insiders shipped a brand new search plugin, yielding massive improvements in usability, but also in speed and size of the search index. Interestingly, as discussed in the previous blog article, we only scratched the surface of what's now possible. This release brings some useful features that enhance the writing experience, allowing for more fine-grained control of what pages, sections and blocks of a Markdown file should be indexed by the built-in search functionality.</p> <p>The following section discusses existing solutions for excluding pages and sections from the search index. If you immediately want to learn what's new, skip to the section just after that.</p>"},{"location":"blog/2021/09/26/excluding-content-from-search/#prior-art","title":"Prior art","text":"<p>MkDocs has a rich and thriving ecosystem of plugins, and it comes as no surprise that there's already a fantastic plugin by @chrieke to exclude specific sections of a Markdown file \u2013 the mkdocs-exclude-search plugin. It can be installed with:</p> <pre><code>pip install mkdocs-exclude-search\n</code></pre> <p>How it works: the plugin post-processes the <code>search_index.json</code> file that is generated by the built-in search plugin, giving the author the ability to exclude certain pages and sections by adding a few lines of configuration to <code>mkdocs.yml</code>. An example:</p> <pre><code>plugins:\n  - search\n  - exclude-search:\n      exclude:\n        - page.md\n        - page.md#section\n        - directory/*\n        - /*/page.md\n</code></pre> <p>It's easy to see that the plugin follows a configuration-centric approach, which adds support for advanced filtering techniques like infix- and suffix-filtering using wildcards. While this is a very powerful idea, it comes with some downsides:</p> <ol> <li> <p>Exclusion patterns and content are not co-located: exclusion patterns     need to be defined in <code>mkdocs.yml</code>, and not as part of the respective     document or section to be excluded. This might result in stale exclusion     patterns, leading to unintended behavior:</p> <ul> <li> <p>When a headline is changed, its slug (permalink) also changes, which might   suddenly match (or unmatch) a pattern, e.g., when an author fixes a typo   in a headline.</p> </li> <li> <p>As exclusion patterns support the use of wildcards, different authors   might overwrite each other's patterns without any immediate feedback since   the plugin does only report the number of excluded documents \u2013 not what   has been excluded.<sup>1</sup></p> </li> </ul> </li> <li> <p>Exclusion control might be too coarse: The mkdocs-exclude-search     plugin only allows for the exclusion of pages and sections. It's not     possible to exclude parts of a section, e.g., content that is irrelevant     to search but must be included as part of the documentation.</p> </li> </ol>"},{"location":"blog/2021/09/26/excluding-content-from-search/#whats-new","title":"What's new?","text":"<p>The latest Insiders release brings fine-grained control for excluding pages, sections, and blocks from the search index, implemented through front matter, as well as the Attribute Lists. Note that it doesn't replace the mkdocs-exclude-search plugin but complements it.</p>"},{"location":"blog/2021/09/26/excluding-content-from-search/#excluding-pages","title":"Excluding pages","text":"<p>An entire page can be excluded from the search index by adding a simple directive to the front matter of the respective Markdown file. The good thing is that the author now only has to check the top of the document to learn whether it is excluded or not:</p> <pre><code>---\nsearch:\n  exclude: true\n---\n\n# Page title\n...\n</code></pre>"},{"location":"blog/2021/09/26/excluding-content-from-search/#excluding-sections","title":"Excluding sections","text":"<p>If a section should be excluded, the author can use the Attribute Lists extension to add a pragma called <code>data-search-exclude</code> at the end of a heading. The pragma is not included in the final HTML, as search pragmas are filtered by the search plugin before the page is rendered:</p> <code>docs/page.md</code> <code>search_index.json</code> <pre><code># Page title\n\n## Section 1\n\nThe content of this section is included\n\n## Section 2 { data-search-exclude }\n\nThe content of this section is excluded\n</code></pre> <pre><code>{\n  ...\n  \"docs\": [\n    {\n      \"location\":\"page/\",\n      \"text\":\"\",\n      \"title\":\"Document title\"\n    },\n    {\n      \"location\":\"page/#section-1\",\n      \"text\":\"&lt;p&gt;The content of this section is included&lt;/p&gt;\",\n      \"title\":\"Section 1\"\n    }\n  ]\n}\n</code></pre>"},{"location":"blog/2021/09/26/excluding-content-from-search/#excluding-blocks","title":"Excluding blocks","text":"<p>If even more fine-grained control is desired, the pragma can be added to any block-level element or inline-level element that is officially supported by the Attribute Lists extension:</p> <code>docs/page.md</code> <code>search_index.json</code> <pre><code># Page title\n\nThe content of this block is included\n\nThe content of this block is excluded\n{ data-search-exclude }\n</code></pre> <pre><code>{\n  ...\n  \"docs\": [\n    {\n      \"location\":\"page/\",\n      \"text\":\"&lt;p&gt;The content of this block is included&lt;/p&gt;\",\n      \"title\":\"Document title\"\n    },\n  ]\n}\n</code></pre>"},{"location":"blog/2021/09/26/excluding-content-from-search/#conclusion","title":"Conclusion","text":"<p>The latest release brings three simple ways to control more precisely what goes into the search index and what doesn't. It complements the already very powerful mkdocs-exclude-search plugin, allowing for new methods of shaping the structure, size and content of the search index.</p> <ol> <li> <p>When the log level is set to <code>DEBUG</code>, the plugin will report exactly which pages and sections have been excluded from the search index, but MkDocs will now flood the terminal with debug output from its core and other plugins.\u00a0\u21a9</p> </li> </ol>"},{"location":"blog/2023/09/22/using-git-sparse-checkout-for-faster-documentation-builds/","title":"Using <code>git sparse-checkout</code> for faster documentation builds","text":"<p>Leveraging <code>git sparse-checkout</code> in GitHub Actions enabled us to speed up documentation builds in our repository, cutting checkout times from 20 to 30 seconds to just 2 seconds.</p> <p>Developing an efficient approach to build documentation in CI workflows is essential, especially when working in large repositories with thousands of commits, like ours. Of course, we want to build documentation quickly and efficiently, ensuring fast and productive workflows. When using both the wonderful <code>git-committers</code> and <code>git-revision-date-localized</code> plugins to display document contributors and dates at the bottom of each page, we are required to set <code>fetch-depth: 0</code>, which resulted in checkout times of 20 to 30 seconds on our repository. By leveraging <code>git sparse-checkout</code> within GitHub Actions, check out time was brought down to 2 seconds.</p>"},{"location":"blog/2023/09/22/using-git-sparse-checkout-for-faster-documentation-builds/#a-primer","title":"A Primer","text":"<p><code>git sparse-checkout</code> allows you to check out only a subset of the files in a repository, making it incredibly useful for large repositories where a full checkout takes long and includes many files that are not relevant when building documentation.</p>"},{"location":"blog/2023/09/22/using-git-sparse-checkout-for-faster-documentation-builds/#github-actions","title":"GitHub Actions","text":"<p>To enable <code>git sparse-checkout</code> within GitHub Actions and ensure that you are only building the documentation that you need, add the following lines to your workflow file:</p> <pre><code>- uses: actions/checkout@v4\n  with:\n    fetch-depth: 0\n    sparse-checkout: |\n      docs\n      includes\n</code></pre> <p><code>git sparse-checkout</code> always checks out all files residing in the repository\u2019s root. This means that regardless of the specified paths or directories for sparse checkout, the files located in the root of the repository will always be included in the checkout process.</p> <p>Thus, you only need to specify the directories that are necessary for building documentation. In our case, we only need the <code>docs</code> and <code>includes</code> folders, but if you need additional directories, you can just add them to the end of the list. A complete example workflow for GitHub Actions:</p> <pre><code>name: documentation\non:\n  push:\n    branches:\n      - master\n      - main\npermissions:\n  contents: write\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n          sparse-checkout: |\n            docs\n            includes\n      - uses: actions/setup-python@v4\n        with:\n          python-version: 3.x\n      - run: pip install mkdocs-material\n      - run: mkdocs gh-deploy --force\n</code></pre>"},{"location":"blog/2023/09/22/using-git-sparse-checkout-for-faster-documentation-builds/#conclusion","title":"Conclusion","text":"<p>That's all there is! We're super happy with the results and hope that this will help you to speed up your documentation builds in GitHub Actions as well. As always, feel free to share your thoughts and experiences in the comments below.</p>"},{"location":"blog/2021/09/13/search-better-faster-smaller/","title":"Search: better, faster, smaller","text":"<p>This is the story of how we managed to completely rebuild client-side search, delivering a significantly better user experience while making it faster and smaller at the same time.</p> <p>The search of Material for MkDocs is by far one of its best and most-loved assets: multilingual, offline-capable, and most importantly: all client-side. It provides a solution to empower the users of your documentation to find what they're searching for instantly without the headache of managing additional servers. However, even though several iterations have been made, there's still some room for improvement, which is why we rebuilt the search plugin and integration from the ground up. This article shines some light on the internals of the new search, why it's much more powerful than the previous version, and what's about to come.</p> <p>The next section discusses the architecture and issues of the current search implementation. If you immediately want to learn what's new, skip to the section just after that.</p>"},{"location":"blog/2021/09/13/search-better-faster-smaller/#architecture","title":"Architecture","text":"<p>Material for MkDocs uses lunr together with lunr-languages to implement its client-side search capabilities. When a documentation page is loaded and JavaScript is available, the search index as generated by the built-in search plugin during the build process is requested from the server:</p> <pre><code>const index$ = document.forms.namedItem(\"search\")\n  ? __search?.index || requestJSON&lt;SearchIndex&gt;(\n    new URL(\"search/search_index.json\", config.base)\n  )\n  : NEVER\n</code></pre>"},{"location":"blog/2021/09/13/search-better-faster-smaller/#search-index","title":"Search index","text":"<p>The search index includes a stripped-down version of all pages. Let's take a look at an example to understand precisely what the search index contains from the original Markdown file:</p> Expand to inspect example <code>docs/page.md</code> <code>search_index.json</code> <pre><code># Example\n\n## Text\n\nIt's very easy to make some words **bold** and other words *italic*\nwith Markdown. You can even add [links](#), or even `code`:\n\n```\nif (isAwesome) {\n  return true\n}\n```\n\n## Lists\n\nSometimes you want numbered lists:\n\n1. One\n2. Two\n3. Three\n\nSometimes you want bullet points:\n\n* Start a line with a star\n* Profit!\n</code></pre> <pre><code>{\n  \"config\": {\n    \"indexing\": \"full\",\n    \"lang\": [\n      \"en\"\n    ],\n    \"min_search_length\": 3,\n    \"prebuild_index\": false,\n    \"separator\": \"[\\\\s\\\\-]+\"\n  },\n  \"docs\": [\n    {\n      \"location\": \"page/\",\n      \"title\": \"Example\",\n      \"text\": \"Example Text It's very easy to make some words bold and other words italic with Markdown. You can even add links , or even code : if (isAwesome) { return true } Lists Sometimes you want numbered lists: One Two Three Sometimes you want bullet points: Start a line with a star Profit!\"\n    },\n    {\n      \"location\": \"page/#example\",\n      \"title\": \"Example\",\n      \"text\": \"\"\n    },\n    {\n      \"location\": \"page/#text\",\n      \"title\": \"Text\",\n      \"text\": \"It's very easy to make some words bold and other words italic with Markdown. You can even add links , or even code : if (isAwesome) { return true }\"\n    },\n    {\n      \"location\": \"page/#lists\",\n      \"title\": \"Lists\",\n      \"text\": \"Sometimes you want numbered lists: One Two Three Sometimes you want bullet points: Start a line with a star Profit!\"\n    }\n  ]\n}\n</code></pre> <p>If we inspect the search index, we immediately see several problems:</p> <ol> <li> <p>All content is included twice: the search index contains one entry       with the entire contents of the page, and one entry for each section of       the page, i.e., each block preceded by a headline or subheadline. This       significantly contributes to the size of the search index.</p> </li> <li> <p>All structure is lost: when the search index is built, all structural       information like HTML tags and attributes are stripped from the content.       While this approach works well for paragraphs and inline formatting, it       might be problematic for lists and code blocks. An excerpt:</p> <pre><code>\u2026 links , or even code : if (isAwesome) { \u2026 } Lists Sometimes you want \u2026\n</code></pre> <ul> <li> <p>Context: for an untrained eye, the result can look like gibberish, as   it's not immediately apparent what classifies as text and what as code.   Furthermore, it's not clear that <code>Lists</code> is a headline as it's merged   with the code block before and the paragraph after it.</p> </li> <li> <p>Punctuation: inline elements like links that are immediately followed   by punctuation are separated by whitespace (see <code>,</code> and <code>:</code> in the   excerpt). This is because all extracted text is joined with a whitespace   character during the construction of the search index.</p> </li> </ul> </li> </ol> <p>It's not difficult to see that it can be quite challenging to implement a good search experience for theme authors, which is why Material for MkDocs (up to now) did some monkey patching to be able to render slightly more meaningful search previews.</p>"},{"location":"blog/2021/09/13/search-better-faster-smaller/#search-worker","title":"Search worker","text":"<p>The actual search functionality is implemented as part of a web worker<sup>1</sup>, which creates and manages the lunr search index. When search is initialized, the following steps are taken:</p> <ol> <li> <p>Linking sections with pages: The search index is parsed, and each     section is linked to its parent page. The parent page itself is not     indexed, as it would lead to duplicate results, so only the sections     remain. Linking is necessary, as search results are grouped by page.</p> </li> <li> <p>Tokenization: The <code>title</code> and <code>text</code> values of each section are split     into tokens by using the <code>separator</code> as configured in     <code>mkdocs.yml</code>. Tokenization itself is carried out by     lunr's default tokenizer, which doesn't allow for     lookahead or separators spanning multiple characters.</p> <p>Why is this important and a big deal? We will see later how much more we can achieve with a tokenizer that is capable of separating strings with lookahead.</p> </li> <li> <p>Indexing: As a final step, each section is indexed. When querying the     index, if a search query includes one of the tokens as returned by step 2.,     the section is considered to be part of the search result and passed to the     main thread.</p> </li> </ol> <p>Now, that's basically how the search worker operates. Sure, there's a little more magic involved, e.g., search results are post-processed and rescored to account for some shortcomings of lunr, but in general, this is how data gets into and out of the index.</p>"},{"location":"blog/2021/09/13/search-better-faster-smaller/#search-previews","title":"Search previews","text":"<p>Users should be able to quickly scan and evaluate the relevance of a search result in the given context, which is why a concise summary with highlighted occurrences of the search terms found is an essential part of a great search experience.</p> <p>This is where the current search preview generation falls short, as some of the search previews appear not to include any occurrence of any of the search terms. This was due to the fact that search previews were truncated after a maximum of 320 characters, as can be seen here:</p> <p></p> <p>The first two results look like they're not relevant, as they don't seem to include the query string the user just searched for. Yet, they are.</p> <p>A better solution to this problem has been on the roadmap for a very, very long time, but in order to solve this once and for all, several factors need to be carefully considered:</p> <ol> <li> <p>Word boundaries: some themes<sup>2</sup> for static site generators generate    search previews by expanding the text left and right next to an occurrence,    stopping at a whitespace character when enough words have been consumed. A    preview might look like this:</p> <pre><code>\u2026 channels, e.g., or which can be configured via mkdocs.yml \u2026\n</code></pre> <p>While this may work for languages that use whitespace as a separator between words, it breaks down for languages like Japanese or Chinese<sup>3</sup>, as they have non-whitespace word boundaries and use dedicated segmenters to split strings into tokens.</p> </li> <li> <p>Context-awareness: Although whitespace doesn't work for all languages,     one could argue that it could be a good enough solution. Unfortunately, this     is not necessarily true for code blocks, as the removal of whitespace might     change meaning in some languages.</p> </li> <li> <p>Structure: Preserving structural information is not a must, but     apparently beneficial to build more meaningful search previews which allow     for a quick evaluation of relevance. If a word occurrence is part of a code     block, it should be rendered as a code block.</p> </li> </ol>"},{"location":"blog/2021/09/13/search-better-faster-smaller/#whats-new","title":"What's new?","text":"<p>After we built a solid understanding of the problem space and before we dive into the internals of our new search implementation to see which of the problems it already solves, a quick overview of what features and improvements it brings:</p> <ul> <li>Better: support for rich search previews, preserving the structural   information of code blocks, inline code, and lists, so they are rendered   as-is, as well as lookahead tokenization, more accurate highlighting, and   improved stability of typeahead. Also, a slightly better UX.</li> <li>Faster and smaller: significant decrease in search index size of up   to 48% due to improved extraction and construction techniques, resulting in a   search experience that is up to 95% faster, which is particularly helpful for   large documentation projects.</li> </ul>"},{"location":"blog/2021/09/13/search-better-faster-smaller/#rich-search-previews","title":"Rich search previews","text":"<p>As we rebuilt the search plugin from scratch, we reworked the construction of the search index to preserve the structural information of code blocks, inline code, as well as unordered and ordered lists. Using the example from the search index section, here's how it looks:</p> NowBefore <p></p> <p></p> <p>Now, code blocks are first-class citizens of search previews, and even inline code formatting is preserved. Let's take a look at the new structure of the search index to understand why:</p> Expand to inspect search index NowBefore <pre><code>{\n  ...\n  \"docs\": [\n    {\n      \"location\": \"page/\",\n      \"title\": \"Example\",\n      \"text\": \"\"\n    },\n    {\n      \"location\": \"page/#text\",\n      \"title\": \"Text\",\n      \"text\": \"&lt;p&gt;It's very easy to make some words bold and other words italic with Markdown. You can even add links, or even &lt;code&gt;code&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;if (isAwesome){\\n  return true\\n}\\n&lt;/code&gt;&lt;/pre&gt;\"\n    },\n    {\n      \"location\": \"page/#lists\",\n      \"title\": \"Lists\",\n      \"text\": \"&lt;p&gt;Sometimes you want numbered lists:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;One&lt;/li&gt; &lt;li&gt;Two&lt;/li&gt; &lt;li&gt;Three&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;Sometimes you want bullet points:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Start a line with a star&lt;/li&gt; &lt;li&gt;Profit!&lt;/li&gt; &lt;/ul&gt;\"\n    }\n  ]\n}\n</code></pre> <pre><code>{\n  ...\n  \"docs\": [\n    {\n      \"location\": \"page/\",\n      \"title\": \"Example\",\n      \"text\": \"Example Text It's very easy to make some words bold and other words italic with Markdown. You can even add links , or even code : if (isAwesome) { return true } Lists Sometimes you want numbered lists: One Two Three Sometimes you want bullet points: Start a line with a star Profit!\"\n    },\n    {\n      \"location\": \"page/#example\",\n      \"title\": \"Example\",\n      \"text\": \"\"\n    },\n    {\n      \"location\": \"page/#text\",\n      \"title\": \"Text\",\n      \"text\": \"It's very easy to make some words bold and other words italic with Markdown. You can even add links , or even code : if (isAwesome) { return true }\"\n    },\n    {\n      \"location\": \"page/#lists\",\n      \"title\": \"Lists\",\n      \"text\": \"Sometimes you want numbered lists: One Two Three Sometimes you want bullet points: Start a line with a star Profit!\"\n    }\n  ]\n}\n</code></pre> <p>If we inspect the search index again, we can see how the situation improved:</p> <ol> <li> <p>Content is included only once: the search index does not include the     content of the page twice, as only the sections of a page are part of the     search index. This leads to a significant reduction in size, fewer bytes to     transfer, and a smaller search index.</p> </li> <li> <p>Some structure is preserved: each section of the search index includes     a small subset of HTML to provide the necessary structure to allow for more     sophisticated search previews. Revisiting our example from before, let's     look at an excerpt:</p> NowBefore <pre><code>\u2026 links, or even &lt;code&gt;code&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;if (isAwesome){ \u2026 }\\n&lt;/code&gt;&lt;/pre&gt;\n</code></pre> <pre><code>\u2026 links , or even code : if (isAwesome) { \u2026 }\n</code></pre> <p>The punctuation issue is gone, as no additional whitespace is inserted, and the preserved markup yields additional context to make scanning search results more effective.</p> </li> </ol> <p>On to the next step in the process: tokenization.</p>"},{"location":"blog/2021/09/13/search-better-faster-smaller/#tokenizer-lookahead","title":"Tokenizer lookahead","text":"<p>The default tokenizer of lunr uses a regular expression to split a given string by matching each character against the <code>separator</code> as defined in <code>mkdocs.yml</code>. This doesn't allow for more complex separators based on lookahead or multiple characters.</p> <p>Fortunately, our new search implementation provides an advanced tokenizer that doesn't have these shortcomings and supports more complex regular expressions. As a result, Material for MkDocs just changed its own separator configuration to the following value:</p> <pre><code>[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&amp;[lg]t;\n</code></pre> <p>While the first part up to the first <code>|</code> contains a list of single control characters at which the string should be split, the following three sections explain the remainder of the regular expression.<sup>4</sup></p>"},{"location":"blog/2021/09/13/search-better-faster-smaller/#case-changes","title":"Case changes","text":"<p>Many programming languages use <code>PascalCase</code> or <code>camelCase</code> naming conventions. When a user searches for the term <code>case</code>, it's quite natural to expect for <code>PascalCase</code> and <code>camelCase</code> to show up. By adding the following match group to the separator, this can now be achieved with ease:</p> <pre><code>(?!\\b)(?=[A-Z][a-z])\n</code></pre> <p>This regular expression is a combination of a negative lookahead (<code>\\b</code>, i.e., not a word boundary) and a positive lookahead (<code>[A-Z][a-z]</code>, i.e., an uppercase character followed by a lowercase character), and has the following behavior:</p> <ul> <li><code>PascalCase</code> <code>Pascal</code>, <code>Case</code></li> <li><code>camelCase</code> <code>camel</code>, <code>Case</code></li> <li><code>UPPERCASE</code> <code>UPPERCASE</code></li> </ul> <p>Searching for  searchHighlight now brings up the section discussing the <code>search.highlight</code> feature flag, which also demonstrates that this now even works properly for search queries.<sup>5</sup></p>"},{"location":"blog/2021/09/13/search-better-faster-smaller/#version-numbers","title":"Version numbers","text":"<p>Indexing version numbers is another problem that can be solved with a small lookahead. Usually, <code>.</code> should be considered a separator to split words like <code>search.highlight</code>. However, splitting version numbers at <code>.</code> will make them undiscoverable. Thus, the following expression:</p> <pre><code>\\.(?!\\d)\n</code></pre> <p>This regular expression matches a <code>.</code> only if not immediately followed by a digit <code>\\d</code>, which leaves version numbers discoverable. Searching for  7.2.6 brings up the 7.2.6 release notes.</p>"},{"location":"blog/2021/09/13/search-better-faster-smaller/#htmlxml-tags","title":"HTML/XML tags","text":"<p>If your documentation includes HTML/XML code examples, you may want to allow users to find specific tag names. Unfortunately, the <code>&lt;</code> and <code>&gt;</code> control characters are encoded in code blocks as <code>&amp;lt;</code> and <code>&amp;gt;</code>. Now, adding the following expression to the separator allows for just that:</p> <pre><code>&amp;[lg]t;\n</code></pre> <p>We've only just begun to scratch the surface of the new possibilities tokenizer lookahead brings. If you found other useful expressions, you're invited to share them in the comment section.</p>"},{"location":"blog/2021/09/13/search-better-faster-smaller/#accurate-highlighting","title":"Accurate highlighting","text":"<p>Highlighting is the last step in the process of search and involves the highlighting of all search term occurrences in a given search result. For a long time, highlighting was implemented through dynamically generated regular expressions.<sup>6</sup></p> <p>This approach has some problems with non-whitespace languages like Japanese or Chinese<sup>3</sup> since it only works if the highlighted term is at a word boundary. However, Asian languages are tokenized using a dedicated segmenter, which cannot be modeled with regular expressions.</p> <p>Now, as a direct result of the new tokenization approach, our new search implementation uses token positions for highlighting, making it exactly as powerful as tokenization:</p> <ol> <li> <p>Word boundaries: as the new highlighter uses token positions, word     boundaries are equal to token boundaries. This means that more complex cases     of tokenization (e.g., case changes, version numbers, HTML/XML tags),     are now all highlighted accurately.</p> </li> <li> <p>Context-awareness: as the new search index preserves some of the     structural information of the original document, the content of a section     is now divided into separate content blocks \u2013 paragraphs, code blocks, and     lists.</p> <p>Now, only the content blocks that actually contain occurrences of one of the search terms are considered for inclusion into the search preview. If a term only occurs in a code block, it's the code block that gets rendered, see, for example, the results of  twitter.</p> </li> </ol>"},{"location":"blog/2021/09/13/search-better-faster-smaller/#benchmarks","title":"Benchmarks","text":"<p>We conducted two benchmarks \u2013 one with the documentation of Material for MkDocs itself, and one with a very massive corpus of Markdown files with more than 800,000 words \u2013 a size most documentation projects will likely never reach:</p> Before Now Relative Material for MkDocs Index size 573 kB 335 kB \u201342% Index size (<code>gzip</code>) 105 kB 78 kB \u201327% Indexing time<sup>7</sup> 265 ms 177 ms \u201334% KJV Markdown<sup>8</sup> Index size 8.2 MB 4.4 MB \u201347% Index size (<code>gzip</code>) 2.3 MB 1.2 MB \u201348% Indexing time 2,700 ms 1,390 ms \u201348% <p>Benchmark results</p> <p>The results show that indexing time, which is the time that it takes to set up the search when the page is loaded, has dropped by up to 48%, which means the new search is up to 95% faster. This is a significant improvement, particularly relevant for large documentation projects.</p> <p>While 1,3s still may sound like a long time, using the new client-side search together with instant loading only creates the search index on the initial page load. When navigating, the search index is preserved across pages, so the cost does only have to be paid once.</p>"},{"location":"blog/2021/09/13/search-better-faster-smaller/#user-interface","title":"User interface","text":"<p>Additionally, some small improvements have been made, most prominently the more results on this page button, which now sticks to the top of the search result list when open. This enables the user to jump out of the list more quickly.</p>"},{"location":"blog/2021/09/13/search-better-faster-smaller/#whats-next","title":"What's next?","text":"<p>Our new search implementation is a big improvement to Material for MkDocs. It solves some long-standing issues which needed to be tackled for years. Yet, it's only the start of a search experience that is going to get better and better. Next up:</p> <ul> <li> <p>Context-aware search summarization: currently, the first two matching   content blocks are rendered as a search preview. With the new tokenization   technique, we laid the groundwork for more sophisticated shortening and   summarization methods, which we're tackling next.</p> </li> <li> <p>User interface improvements: as we now gained full control over the   search plugin, we can now add meaningful metadata to provide more context and   a better experience. We'll explore some of those paths in the future.</p> </li> </ul> <p>If you've made it this far, thank you for your time and interest in Material for MkDocs! This is the first blog article that I decided to write after a short Twitter survey made me to. You're invited to leave a comment to share your experiences with the new search implementation.</p> <ol> <li> <p>Prior to , search was carried out in the main thread  which locked up the browser, rendering it unusable. This problem was first reported in #904 and, after some back and forth, fixed and released in .\u00a0\u21a9</p> </li> <li> <p>At the time of writing, Just the Docs and Docusaurus use this method for generating search previews. Note that the latter also integrates with Algolia, which is a fully managed server-based solution.\u00a0\u21a9</p> </li> <li> <p>China and Japan are both within the top 5 countries of origin of users of Material for MkDocs.\u00a0\u21a9\u21a9</p> </li> <li> <p>As a fun fact: the <code>separator</code> default value of the search plugin being <code>[\\s\\-]+</code> always has been kind of irritating, as it suggests that multiple characters can be considered being a separator. However, the <code>+</code> is completely irrelevant, as regular expression groups involving multiple characters were never supported by lunr's default tokenizer.\u00a0\u21a9</p> </li> <li> <p>Previously, the search query was not correctly tokenized due to the way lunr treats wildcards, as it disables the pipeline for search terms that contain wildcards. In order to provide a good typeahead experience, Material for MkDocs adds wildcards to the end of each search term not explicitly preceded with <code>+</code> or <code>-</code>, effectively disabling tokenization.\u00a0\u21a9</p> </li> <li> <p>Using the separator as defined in <code>mkdocs.yml</code>, a regular expression was constructed that was trying to mimic the tokenizer. As an example, the search query <code>search highlight</code> was transformed into the rather cumbersome regular expression <code>(^|&lt;separator&gt;)(search|highlight)</code>, which only matches at word boundaries.\u00a0\u21a9</p> </li> <li> <p>Smallest value of ten distinct runs.\u00a0\u21a9</p> </li> <li> <p>We agnostically use KJV Markdown as a tool for testing to learn how Material for MkDocs behaves on large corpora, as it's a very large set of Markdown files with over 800k words.\u00a0\u21a9</p> </li> </ol>"},{"location":"blog/2023/10/02/sunsetting-gitter-towards-efficient-community-engagement/","title":"Sunsetting Gitter: Towards Efficient Community Engagement","text":"<p>As we're starting to build a team around Material for MkDocs, we've decided to sunset and archive our Gitter channel on October 13, 2023 in favor of GitHub Discussions.</p> <p>As part of our efforts to improve the processes for maintaining Material for MkDocs and for supporting the community, we have reviewed the use of different communication channels. At the moment, both Gitter and GitHub Discussions allow to ask the community for support and to discuss ideas and issues. In the past weeks, we have begun to question whether this duplication is in the best interest of our project. This post explains the rationale behind our decision.</p>"},{"location":"blog/2023/10/02/sunsetting-gitter-towards-efficient-community-engagement/#the-constraints-of-gitter","title":"The Constraints of Gitter","text":"<p>In the first years of Material for MkDocs, Gitter served as a helpful platform for quick community interactions and questions. However, there are some inherent constraints that necessitated a shift. Here's a breakdown of the challenges we encountered:</p> <ol> <li> <p>Thread utilization \u2013    Even with the introduction of threads, many Gitter users were reticent to    use them, leading to cluttered and disconnected conversations, making it     difficult to follow.</p> </li> <li> <p>Search and discovery \u2013    Gitter's structure and interface makes it cumbersome to search for and    retrieve past messages, resulting in lost insights and repeated conversations.</p> </li> <li> <p>User interface \u2013    After the acquisition by Element, the user interface of Gitter has    experienced a severe decline, becoming more complicated, less intuitive and    user-friendly.</p> </li> <li> <p>Access mandate \u2013    The necessity for users to grant access to their GitHub accounts to use    Gitter posed an unnecessary access barrier and potential security concerns.</p> </li> </ol>"},{"location":"blog/2023/10/02/sunsetting-gitter-towards-efficient-community-engagement/#github-discussions","title":"GitHub Discussions","text":"<p>Thankfully, GitHub Discussions emerged and continues to evolve to be a much better alternative, eliminating many of Gitter's constraints and offering enhanced functionality:</p> <ol> <li> <p>Threaded conversations \u2013    GitHub Discussions supports structured, threaded conversations, ensuring    discussions are coherent, contextual, and easy to follow for everyone.</p> </li> <li> <p>Integration and linking \u2013    the platform facilitates seamless linking to other discussions, issues, code,    and much more, enriching conversations and providing comprehensive context.</p> </li> <li> <p>A unified platform \u2013    GitHub acts as a one-stop shop for support, allowing users to access varied    resources and support channels in one place, greatly improving user    experience.</p> </li> <li> <p>Discoverability \u2013    GitHub Discussions are easily searchable and allow for categorization,    preventing loss of valuable insights and fostering knowledge sharing.</p> </li> </ol>"},{"location":"blog/2023/10/02/sunsetting-gitter-towards-efficient-community-engagement/#conclusion","title":"Conclusion","text":"<p>Sunsetting Gitter is a leap towards creating more efficient, user-friendly, and enriched community interactions. By consolidating communication to GitHub Discussions, we seek to mitigate the fragmentation of information, ease the user journey, and fortify the bonds within our community.</p> <p>This concentrated approach enables us to provide consistent, fast and quality support to our users. In the past, the nature of queries raised on Gitter typically necessitated supplementary information or reproductions, prompting us to advise users to initiate a discussion subsequently. The shift to a centralized discussion forum is designed to simplify and accelerate this procedure, ensuring swift and efficient resolutions for our community. It is a testament to our ongoing commitment to support the community that helps Material for MkDocs flourish.</p> <p>We are confident that this streamlined approach will spur more fruitful discussions, innovative ideas, and collective growth, and we are excited to continue our journey with the unwavering support and active participation of our community.</p>"},{"location":"blog/2021/12/27/the-past-present-and-future/","title":"The past, present and future","text":"<p>2021 was a fantastic year for this project as we shipped many new awesome features, saw significant user growth and leveraged GitHub Sponsors to make the project sustainable.</p> <p>Today, together, MkDocs and Material for MkDocs are among the most popular options when it comes to choosing a static site generator and theme for your technical documentation project. Material for MkDocs ensures that your content is always perfectly presented to your audience, regardless of screen resolution or device capabilities. It has evolved to a framework for technical writing, offering many features, some of which are yet to be found in other static site generators. However, we're far from the end, as 2022 is going to bring some interesting new capabilities.</p> <p>This article showcases all features that were added in 2021 and gives an outlook on what's going to drop in 2022. Additionally, it provides some context on the history of the project.</p>"},{"location":"blog/2021/12/27/the-past-present-and-future/#a-little-history","title":"A little history","text":"<p>In 2015, albeit 10 years in the industry, I was still quite new in Open Source. I wanted to release my latest Open Source project protobluff, a zero-copy Protocol Buffers implementation for C, which I've created as part of my former startup. As the project has a significant degree of complexity, I quickly realized that I was in need of good user documentation.</p> <p>After evaluating static site generators in general and Hugo, Sphinx and MkDocs in particular, I quickly decided that MkDocs seemed a good choice, as it was specifically aimed at technical project documentation and easy to use. Unfortunately, all of the available themes looked dated and given that I'm a very visual person, I just couldn't convince myself to call it a day.</p> <p>I had to build a theme.</p> <p>Months later, in February 2016, I released the first version of Material for MkDocs (and with it, protobluff, the project I wanted to release in the first place), and it looked like this:</p> <p></p> <p>It was already fully responsive and overall, well, quite okayish, but barely customizable, as only the logo could be changed. Beyond that, it had no options: No color or navigation options, no instant loading, etc. The search was very rudimentary and only supported section titles:</p> <p></p> <p>It's important to know that at this point in time I've built Material for MkDocs for protobluff, the project I was really caring about. Almost 6 years later, nobody knows protobluff, but this little side project has taken off. If back in those days, you would've told me big organizations like AWS, Microsoft and CERN, as well as extremely popular Open Source projects like FastAPI and Kubernetes will be using this project in the future \u2013 I would've declared you insane.</p> <p>I still find the success of this project quite surprising, as I thought that themes exist in abundance and are very much a solved problem. There's no glory in themes, no stars to earn (remember that I was new in Open Source, so this was the metric I was optimizing for), as there are thousands and thousands of options. However, as the years progressed, I learned that execution matters: although Material for MkDocs solves a problem for which thousands of solutions exist, it excels in a specific niche, and that niche is to be known as technical project documentation.</p> <p>Today, this project is not only popular but funded by almost 300 individuals and organizations, resulting in a yearly budget of more than $50,000. This allows me to set aside enough time for the development of new features, bug fixing, stability improvement, issue triage and general support and still feels like a dream to me, as there are many failed stories of Open Source funding and people telling you: don't do Open Source, you'll be working for free.</p> <p>Making Open Source sustainable is, after all, possible in 2021.</p>"},{"location":"blog/2021/12/27/the-past-present-and-future/#2021-in-numbers","title":"2021 in numbers","text":"<p>2021 was an exciting year, as the project has seen significant growth.</p> <p>166k people visited the official documentation in 2021, totalling in 1,6m page views which is an increase of 83% when compared to 2020. The average visitor spends 1,5min on the site. While mobile phones make up 12% of visits, tablets only account for 0.6%. Visitors come from as many as 213 countries, which covers almost the whole world.</p>"},{"location":"blog/2021/12/27/the-past-present-and-future/#features","title":"Features","text":"<p>It's absolutely mind-blowing that 38 new features were added to Material for MkDocs throughout 2021 \u2013 that's a new feature every 9,6 days \u2013 which was only possible because of the constantly improving funding situation. Following is a list of all features shipped in alphabetical order, some of which are still exclusively available to sponsors as part of Insiders:</p> <ul> <li>Admonition inline blocks</li> <li>Advanced search highlighting</li> <li>Anchor tracking</li> <li>Back-to-top button</li> <li>Boosting pages in search</li> <li>Brand new search plugin</li> <li>Code annotations</li> <li>Code annotations: anchor links</li> <li>Code annotations: strip comments</li> <li>Code block titles</li> <li>Code block line anchors</li> <li>Color palette toggle</li> <li>Content tabs: improved support</li> <li>Content tabs: auto-linking</li> <li>Content tabs: animated indicator</li> <li>Cookie consent</li> <li>Custom admonition icons</li> <li>Dark mode support for images</li> <li>Dismissable announcement bar</li> <li>Excluding content from search</li> <li>Latest release tag</li> <li>Mermaid.js integration</li> <li>Navigation icons</li> <li>Remove generator notice</li> <li>Rich search previews</li> <li>Stay on page when switching versions</li> <li>Search highlighting</li> <li>Search sharing</li> <li>Search suggestions</li> <li>Section index pages</li> <li>Site language selection</li> <li>Social cards</li> <li>Sticky navigation tabs</li> <li>Tags with search integration</li> <li>Tokenizer with lookahead</li> <li>Versioning</li> <li>Version warning</li> <li>Was this page helpful?</li> </ul> <p>Additionally, a lot of bugs were fixed in the 1,000 commits that were pushed to the repository this year. The changelog includes a list of all fixes. Furthermore, a large amount of time was invested into refactoring the code base to keep it in good shape. While the <code>mkdocs-material</code> package was released 55 times, <code>mkdocs-material-insiders</code> was shipped 72 times.</p>"},{"location":"blog/2021/12/27/the-past-present-and-future/#funding","title":"Funding","text":"<p>In 2021, monthly funding increased from $1,050 in the beginning of January to more than $4,300 (Dec 27, 2021), totaling in a yearly budget of more than $50,000. Compared to last year, revenue from funding has increased by 617% \u2013 which is absolutely unbelievable:</p> <p></p> <p>I'm solely providing these numbers to fulfill the transparency pledge I'm giving to my awesome sponsors, and to show that it's possible to make existing Open Source projects sustainable by following a well-designed release strategy.</p> <p>You can learn about the strategy in the Insiders guide.</p>"},{"location":"blog/2021/12/27/the-past-present-and-future/#2022","title":"2022","text":"<p>Standing at the verge of the next year, it's safe to say that the project will continue to prosper and evolve, yielding many awesome features that will make technical writing more comfortable and flexible. Here's an excerpt of the features that will see the light of day in 2022:</p> <ul> <li> <p>Instant previews: instant previews will render a specific page section   inside a tooltip when hovering an internal link, which will allow to implement   things like glossaries. Further support for improving glossary functionality   will also be investigated.</p> </li> <li> <p>Text annotations: as a logical progression of code annotations which   were added in 2021, authors will be able to add annotations to plain text,   yielding excellent opportunities for side content. Of course, text annotations   will be as easy to use as code annotations.</p> </li> <li> <p>Navigation pruning: to optimize large documentation projects, Material   for MkDocs will introduce a new feature flag called <code>navigation.prune</code> that   will lead to significantly smaller HTML files for documentation projects with   huge navigation hierarchies.</p> </li> <li> <p>Navigation status badge: as an addition to the recently added   navigation icon support, a status will be attributable to   each page, allowing to mark a page in the navigation tree with an icon as    new or  deprecated.   Custom status types will also be supported.</p> </li> <li> <p>Card grids: as a further component in the toolkit of technical writing,   card grids will allow arranging content in grids, which is especially   useful for overview pages. They will allow to arrange arbitrary content,   including code blocks, admonitions, etc.</p> </li> <li> <p>Blog support: blogging support is still under investigation and expected   to be one of the major additions in 2022. Blogging will perfectly integrate   with writing documentation, allowing to use all components available in   Material for MkDocs.</p> </li> </ul> <p>This list is incomplete. Additionally, many new smaller features will be added next year, just as in 2021. You can follow @squidfunk on Twitter to stay updated.</p> <p>Happy new year! </p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#material-for-mkdocs","title":"Material for MkDocs","text":""},{"location":"changelog/#9.5.29","title":"9.5.29 July 14, 2024","text":"<ul> <li>Updated Galician translations</li> <li>Fixed #7362: Annotations in figure captions rendering incorrectly</li> </ul>"},{"location":"changelog/#9.5.28","title":"9.5.28 July 2, 2024","text":"<ul> <li>Fixed #7313: Improved tooltips mounted in sidebar when feature is disabled</li> </ul>"},{"location":"changelog/#9.5.27","title":"9.5.27 June 16, 2024","text":"<ul> <li>Updated Estonian translations</li> </ul>"},{"location":"pentest/","title":"\u6e17\u900f\u6d4b\u8bd5","text":""},{"location":"pentest/ptes/","title":"\u6e17\u900f\u6d4b\u8bd5\u6267\u884c\u6807\u51c6","text":""},{"location":"pentest/ptes/01/","title":"Pre-engagement Interactions","text":""},{"location":"reference/","title":"Reference","text":"<p>Material for MkDocs is packed with many great features that make technical writing a joyful activity. This section of the documentation explains how to set up a page, and showcases all available specimen that can be used directly from within Markdown files.</p>"},{"location":"reference/#configuration","title":"Configuration","text":""},{"location":"reference/#usage","title":"Usage","text":""},{"location":"reference/#setting-the-page-title","title":"Setting the page <code>title</code>","text":"<p>Each page has a designated title, which is used in the navigation sidebar, for social cards and in other places. While MkDocs attempts to automatically determine the title of a page in a four step process, the title can also be explicitly set with the front matter <code>title</code> property:</p> <pre><code>---\ntitle: Lorem ipsum dolor sit amet # (1)!\n---\n\n# Page title\n...\n</code></pre> <ol> <li>This line sets the <code>title</code> inside the HTML document's     <code>head</code> for the generated page to the given value. Note that the     site title, which is set via <code>site_name</code>, is appended with a     dash.</li> </ol>"},{"location":"reference/#setting-the-page-description","title":"Setting the page <code>description</code>","text":"<p>A Markdown file can include a description that is added to the <code>meta</code> tags of a page, and is also used for social cards. It's a good idea to set a <code>site_description</code> in <code>mkdocs.yml</code> as a fallback value if the author does not explicitly define a description for a Markdown file:</p> <pre><code>---\ndescription: Nullam urna elit, malesuada eget finibus ut, ac tortor. # (1)!\n---\n\n# Page title\n...\n</code></pre> <ol> <li>This line sets the <code>meta</code> tag containing the description inside the     document <code>head</code> for the current page to the provided value.</li> </ol>"},{"location":"reference/#setting-the-page-icon","title":"Setting the page <code>icon</code>","text":"<p>An icon can be assigned to each page, which is then rendered as part of the navigation sidebar, as well as navigation tabs, if enabled. Use the front matter <code>icon</code> property to reference an icon, adding the following lines at the top of a Markdown file:</p> <pre><code>---\nicon: material/emoticon-happy # (1)!\n---\n\n# Page title\n...\n</code></pre> <ol> <li> <p>Enter a few keywords to find the perfect icon using our icon search and     click on the shortcode to copy it to your clipboard:</p> <p> <ol></ol> </p> </li> </ol>"},{"location":"reference/#setting-the-page-status","title":"Setting the page <code>status</code>","text":"<p>A status can be assigned to each page, which is then displayed as part of the navigation sidebar. First, associate a status identifier with a description by adding the following to <code>mkdocs.yml</code>:</p> <pre><code>extra:\n  status:\n    &lt;identifier&gt;: &lt;description&gt; # (1)!\n</code></pre> <ol> <li> <p>The identifier can only include alphanumeric characters, as well as dashes     and underscores. For example, if you have a status <code>Recently added</code>, you can     set <code>new</code> as an identifier:</p> <pre><code>extra:\n  status:\n    new: Recently added\n</code></pre> </li> </ol> <p>The page status can now be set with the front matter <code>status</code> property. For example, you can mark a page as <code>new</code> with the following lines at the top of a Markdown file:</p> <pre><code>---\nstatus: new\n---\n\n# Page title\n...\n</code></pre> <p>The following status identifiers are already defined:</p> <ul> <li> \u2013 <code>new</code></li> <li> \u2013 <code>deprecated</code></li> </ul> <p>You can define a custom page status this way but if you want it to have an icon other than the default one you need to also configure that in your <code>extra.css</code>. We have an example for a custom page status to get you started.</p>"},{"location":"reference/#setting-the-page-subtitle","title":"Setting the page <code>subtitle</code>","text":"<p>Each page can define a subtitle, which is then rendered below the title as part of the navigation sidebar by using the front matter <code>subtitle</code> property, and adding the following lines:</p> <pre><code>---\nsubtitle: Nullam urna elit, malesuada eget finibus ut, ac tortor\n---\n\n# Page title\n...\n</code></pre>"},{"location":"reference/#setting-the-page-template","title":"Setting the page <code>template</code>","text":"<p>If you're using theme extension and created a new page template in the <code>overrides</code> directory, you can enable it for a specific page. Add the following lines at the top of a Markdown file:</p> <pre><code>---\ntemplate: custom.html\n---\n\n# Page title\n...\n</code></pre> How to set a page template for an entire folder? <p>With the help of the built-in meta plugin, you can set a custom template for an entire section and all nested pages, by creating a <code>.meta.yml</code> file in the corresponding folder with the following content:</p> <pre><code>template: custom.html\n</code></pre>"},{"location":"reference/#customization","title":"Customization","text":""},{"location":"reference/#using-metadata-in-templates","title":"Using metadata in templates","text":""},{"location":"reference/#on-all-pages","title":"on all pages","text":"<p>In order to add custom <code>meta</code> tags to your document, you can extend the theme  and override the <code>extrahead</code> block, e.g. to add indexing policies for search engines via the <code>robots</code> property:</p> <pre><code>{% extends \"base.html\" %}\n\n{% block extrahead %}\n  &lt;meta name=\"robots\" content=\"noindex, nofollow\" /&gt;\n{% endblock %}\n</code></pre>"},{"location":"reference/#on-a-single-page","title":"on a single page","text":"<p>If you want to set a <code>meta</code> tag on a single page, or want to set different values for different pages, you can use the <code>page.meta</code> object inside your template override, e.g.:</p> <pre><code>{% extends \"base.html\" %}\n\n{% block extrahead %}\n  {% if page and page.meta and page.meta.robots %}\n    &lt;meta name=\"robots\" content=\"{{ page.meta.robots }}\" /&gt;\n  {% else %}\n    &lt;meta name=\"robots\" content=\"index, follow\" /&gt;\n  {% endif %}\n{% endblock %}\n</code></pre> <p>You can now use <code>robots</code> exactly like <code>title</code> and <code>description</code> to set values. Note that in this case, the template defines an <code>else</code> branch, which would set a default if none was given.</p>"},{"location":"reference/admonitions/","title":"Admonitions","text":"<p>Admonitions, also known as call-outs, are an excellent choice for including side content without significantly interrupting the document flow. Material for MkDocs provides several different types of admonitions and allows for the inclusion and nesting of arbitrary content.</p>"},{"location":"reference/admonitions/#configuration","title":"Configuration","text":"<p>This configuration enables admonitions, allows to make them collapsible and to nest arbitrary content inside admonitions. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n  - admonition\n  - pymdownx.details\n  - pymdownx.superfences\n</code></pre> <p>See additional configuration options:</p> <ul> <li>Admonition</li> <li>Details</li> <li>SuperFences</li> </ul>"},{"location":"reference/admonitions/#admonition-icons","title":"Admonition icons","text":"<p>Each of the supported admonition types has a distinct icon, which can be changed to any icon bundled with the theme, or even a custom icon. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>theme:\n  icon:\n    admonition:\n      &lt;type&gt;: &lt;icon&gt; # (1)!\n</code></pre> <ol> <li> <p>Enter a few keywords to find the perfect icon using our icon search and     click on the shortcode to copy it to your clipboard:</p> <p> <ol></ol> </p> </li> </ol> Expand to show alternate icon sets  Octicons FontAwesome <pre><code>theme:\n  icon:\n    admonition:\n      note: octicons/tag-16\n      abstract: octicons/checklist-16\n      info: octicons/info-16\n      tip: octicons/squirrel-16\n      success: octicons/check-16\n      question: octicons/question-16\n      warning: octicons/alert-16\n      failure: octicons/x-circle-16\n      danger: octicons/zap-16\n      bug: octicons/bug-16\n      example: octicons/beaker-16\n      quote: octicons/quote-16\n</code></pre> <pre><code>theme:\n  icon:\n    admonition:\n      note: fontawesome/solid/note-sticky\n      abstract: fontawesome/solid/book\n      info: fontawesome/solid/circle-info\n      tip: fontawesome/solid/bullhorn\n      success: fontawesome/solid/check\n      question: fontawesome/solid/circle-question\n      warning: fontawesome/solid/triangle-exclamation\n      failure: fontawesome/solid/bomb\n      danger: fontawesome/solid/skull\n      bug: fontawesome/solid/robot\n      example: fontawesome/solid/flask\n      quote: fontawesome/solid/quote-left\n</code></pre>"},{"location":"reference/admonitions/#usage","title":"Usage","text":"<p>Admonitions follow a simple syntax: a block starts with <code>!!!</code>, followed by a single keyword used as a type qualifier. The content of the block follows on the next line, indented by four spaces:</p> Admonition<pre><code>!!! note\n\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.\n</code></pre> <p>Note</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"reference/admonitions/#changing-the-title","title":"Changing the title","text":"<p>By default, the title will equal the type qualifier in titlecase. However, it can be changed by adding a quoted string containing valid Markdown (including links, formatting, ...) after the type qualifier:</p> Admonition with custom title<pre><code>!!! note \"Phasellus posuere in sem ut cursus\"\n\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.\n</code></pre> <p>Phasellus posuere in sem ut cursus</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"reference/admonitions/#removing-the-title","title":"Removing the title","text":"<p>Similar to changing the title, the icon and title can be omitted entirely by adding an empty string directly after the type qualifier. Note that this will not work for collapsible blocks:</p> Admonition without title<pre><code>!!! note \"\"\n\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.\n</code></pre> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"reference/admonitions/#collapsible-blocks","title":"Collapsible blocks","text":"<p>When Details is enabled and an admonition block is started with <code>???</code> instead of <code>!!!</code>, the admonition is rendered as a collapsible block with a small toggle on the right side:</p> Admonition, collapsible<pre><code>??? note\n\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.\n</code></pre> Note <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Adding a <code>+</code> after the <code>???</code> token renders the block expanded:</p> Admonition, collapsible and initially expanded<pre><code>???+ note\n\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.\n</code></pre> Note <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"reference/admonitions/#inline-blocks","title":"Inline blocks","text":"<p>Admonitions can also be rendered as inline blocks (e.g., for sidebars), placing them to the right using the <code>inline</code> + <code>end</code> modifiers, or to the left using only the <code>inline</code> modifier:</p>  inline end inline <p>Lorem ipsum</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>!!! info inline end \"Lorem ipsum\"\n\n    Lorem ipsum dolor sit amet, consectetur\n    adipiscing elit. Nulla et euismod nulla.\n    Curabitur feugiat, tortor non consequat\n    finibus, justo purus auctor massa, nec\n    semper lorem quam in massa.\n</code></pre> <p>Use <code>inline end</code> to align to the right (left for rtl languages).</p> <p>Lorem ipsum</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>!!! info inline \"Lorem ipsum\"\n\n    Lorem ipsum dolor sit amet, consectetur\n    adipiscing elit. Nulla et euismod nulla.\n    Curabitur feugiat, tortor non consequat\n    finibus, justo purus auctor massa, nec\n    semper lorem quam in massa.\n</code></pre> <p>Use <code>inline</code> to align to the left (right for rtl languages).</p> <p>Important: admonitions that use the <code>inline</code> modifiers must be declared prior to the content block you want to place them beside. If there's insufficient space to render the admonition next to the block, the admonition will stretch to the full width of the viewport, e.g., on mobile viewports.</p>"},{"location":"reference/admonitions/#supported-types","title":"Supported types","text":"<p>Following is a list of type qualifiers provided by Material for MkDocs, whereas the default type, and thus fallback for unknown type qualifiers, is <code>note</code><sup>1</sup>:</p> <p>Note</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Abstract</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Info</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Tip</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Success</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Question</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Warning</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Failure</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Danger</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Bug</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Example</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Quote</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"reference/admonitions/#customization","title":"Customization","text":""},{"location":"reference/admonitions/#classic-admonitions","title":"Classic admonitions","text":"<p>Prior to version , admonitions had a slightly different appearance:</p> <p>Note</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>If you want to restore this appearance, add the following CSS to an additional style sheet:</p> <code>docs/stylesheets/extra.css</code> <code>mkdocs.yml</code> <pre><code>.md-typeset .admonition,\n.md-typeset details {\n  border-width: 0;\n  border-left-width: 4px;\n}\n</code></pre> <pre><code>extra_css:\n  - stylesheets/extra.css\n</code></pre>"},{"location":"reference/admonitions/#custom-admonitions","title":"Custom admonitions","text":"<p>If you want to add a custom admonition type, all you need is a color and an <code>*.svg</code> icon. Copy the icon's code from the <code>.icons</code> folder and add the following CSS to an additional style sheet:</p> <code>docs/stylesheets/extra.css</code> <code>mkdocs.yml</code> <pre><code>:root {\n  --md-admonition-icon--pied-piper: url('data:image/svg+xml;charset=utf-8,&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 576 512\"&gt;&lt;path d=\"M244 246c-3.2-2-6.3-2.9-10.1-2.9-6.6 0-12.6 3.2-19.3 3.7l1.7 4.9zm135.9 197.9c-19 0-64.1 9.5-79.9 19.8l6.9 45.1c35.7 6.1 70.1 3.6 106-9.8-4.8-10-23.5-55.1-33-55.1zM340.8 177c6.6 2.8 11.5 9.2 22.7 22.1 2-1.4 7.5-5.2 7.5-8.6 0-4.9-11.8-13.2-13.2-23 11.2-5.7 25.2-6 37.6-8.9 68.1-16.4 116.3-52.9 146.8-116.7C548.3 29.3 554 16.1 554.6 2l-2 2.6c-28.4 50-33 63.2-81.3 100-31.9 24.4-69.2 40.2-106.6 54.6l-6.3-.3v-21.8c-19.6 1.6-19.7-14.6-31.6-23-18.7 20.6-31.6 40.8-58.9 51.1-12.7 4.8-19.6 10-25.9 21.8 34.9-16.4 91.2-13.5 98.8-10zM555.5 0l-.6 1.1-.3.9.6-.6zm-59.2 382.1c-33.9-56.9-75.3-118.4-150-115.5l-.3-6c-1.1-13.5 32.8 3.2 35.1-31l-14.4 7.2c-19.8-45.7-8.6-54.3-65.5-54.3-14.7 0-26.7 1.7-41.4 4.6 2.9 18.6 2.2 36.7-10.9 50.3l19.5 5.5c-1.7 3.2-2.9 6.3-2.9 9.8 0 21 42.8 2.9 42.8 33.6 0 18.4-36.8 60.1-54.9 60.1-8 0-53.7-50-53.4-60.1l.3-4.6 52.3-11.5c13-2.6 12.3-22.7-2.9-22.7-3.7 0-43.1 9.2-49.4 10.6-2-5.2-7.5-14.1-13.8-14.1-3.2 0-6.3 3.2-9.5 4-9.2 2.6-31 2.9-21.5 20.1L15.9 298.5c-5.5 1.1-8.9 6.3-8.9 11.8 0 6 5.5 10.9 11.5 10.9 8 0 131.3-28.4 147.4-32.2 2.6 3.2 4.6 6.3 7.8 8.6 20.1 14.4 59.8 85.9 76.4 85.9 24.1 0 58-22.4 71.3-41.9 3.2-4.3 6.9-7.5 12.4-6.9.6 13.8-31.6 34.2-33 43.7-1.4 10.2-1 35.2-.3 41.1 26.7 8.1 52-3.6 77.9-2.9 4.3-21 10.6-41.9 9.8-63.5l-.3-9.5c-1.4-34.2-10.9-38.5-34.8-58.6-1.1-1.1-2.6-2.6-3.7-4 2.2-1.4 1.1-1 4.6-1.7 88.5 0 56.3 183.6 111.5 229.9 33.1-15 72.5-27.9 103.5-47.2-29-25.6-52.6-45.7-72.7-79.9zm-196.2 46.1v27.2l11.8-3.4-2.9-23.8zm-68.7-150.4l24.1 61.2 21-13.8-31.3-50.9zm84.4 154.9l2 12.4c9-1.5 58.4-6.6 58.4-14.1 0-1.4-.6-3.2-.9-4.6-26.8 0-36.9 3.8-59.5 6.3z\"/&gt;&lt;/svg&gt;')\n}\n.md-typeset .admonition.pied-piper,\n.md-typeset details.pied-piper {\n  border-color: rgb(43, 155, 70);\n}\n.md-typeset .pied-piper &gt; .admonition-title,\n.md-typeset .pied-piper &gt; summary {\n  background-color: rgba(43, 155, 70, 0.1);\n}\n.md-typeset .pied-piper &gt; .admonition-title::before,\n.md-typeset .pied-piper &gt; summary::before {\n  background-color: rgb(43, 155, 70);\n  -webkit-mask-image: var(--md-admonition-icon--pied-piper);\n          mask-image: var(--md-admonition-icon--pied-piper);\n}\n</code></pre> <pre><code>extra_css:\n  - stylesheets/extra.css\n</code></pre> <p>After applying the customization, you can use the custom admonition type:</p> Admonition with custom type<pre><code>!!! pied-piper \"Pied Piper\"\n\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et\n    euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo\n    purus auctor massa, nec semper lorem quam in massa.\n</code></pre> <p>Pied Piper</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <ol> <li> <p>Previously, some of the supported types defined more than one qualifier. For example, authors could use <code>summary</code> or <code>tldr</code> as alternative qualifiers to render an <code>abstract</code> admonition. As this increased the size of the CSS that is shipped with Material for MkDocs, the additional type qualifiers are now all deprecated and will be removed in the next major version. This will also be mentioned in the upgrade guide.\u00a0\u21a9</p> </li> </ol>"},{"location":"reference/annotations/","title":"Annotations","text":"<p>One of the flagship features of Material for MkDocs is the ability to inject annotations \u2013 little markers that can be added almost anywhere in a document and expand a tooltip containing arbitrary Markdown on click or keyboard focus.</p>"},{"location":"reference/annotations/#configuration","title":"Configuration","text":"<p>This configuration allows to add annotations to all inline- and block-level elements, as well as code blocks, and nest annotations inside each other. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n  - attr_list\n  - md_in_html\n  - pymdownx.superfences\n</code></pre> <p>See additional configuration options:</p> <ul> <li>Attribute Lists</li> <li>Markdown in HTML</li> <li>SuperFences</li> </ul>"},{"location":"reference/annotations/#annotation-icons","title":"Annotation icons","text":"<p>The annotation icon can be changed to any icon bundled with the theme, or even a custom icon, e.g. to material/arrow-right-circle:. Simply add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>theme:\n  icon:\n    annotation: material/arrow-right-circle # (1)!\n</code></pre> <ol> <li> <p>Enter a few keywords to find the perfect icon using our icon search and     click on the shortcode to copy it to your clipboard:</p> <p> <ol></ol> </p> </li> </ol> <p>Some popular choices:</p> <ul> <li> - <code>material/plus-circle</code></li> <li> - <code>material/circle-medium</code></li> <li> - <code>material/record-circle</code></li> <li> - <code>material/arrow-right-circle</code></li> <li> - <code>material/arrow-right-circle-outline</code></li> <li> - <code>material/chevron-right-circle</code></li> <li> - <code>material/star-four-points-circle</code></li> <li> - <code>material/plus-circle-outline</code></li> </ul>"},{"location":"reference/annotations/#usage","title":"Usage","text":""},{"location":"reference/annotations/#using-annotations","title":"Using annotations","text":"<p>Annotations consist of two parts: a marker, which can be placed anywhere in a block marked with the <code>annotate</code> class, and content located in a list below the block containing the marker:</p> Text with annotations<pre><code>Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit.\n{ .annotate }\n\n1.  :man_raising_hand: I'm an annotation! I can contain `code`, __formatted\n    text__, images, ... basically anything that can be expressed in Markdown.\n</code></pre> <p>Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit.</p> <ol> <li> I'm an annotation! I can contain <code>code</code>, formatted     text, images, ... basically anything that can be written in Markdown.</li> </ol> <p>Note that the <code>annotate</code> class must only be added to the outermost block. All nested elements can use the same list to define annotations, except when annotations are nested themselves.</p>"},{"location":"reference/annotations/#in-annotations","title":"in annotations","text":"<p>When SuperFences is enabled, annotations can be nested inside annotations by adding the <code>annotate</code> class to the list item hosting the annotation content, repeating the process:</p> Text with nested annotations<pre><code>Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit.\n{ .annotate }\n\n1.  :man_raising_hand: I'm an annotation! (1)\n    { .annotate }\n\n    1.  :woman_raising_hand: I'm an annotation as well!\n</code></pre> <p>Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit.</p> <ol> <li> <p> I'm an annotation! (1)</p> <ol> <li> I'm an annotation as well!</li> </ol> </li> </ol>"},{"location":"reference/annotations/#in-admonitions","title":"in admonitions","text":"<p>The titles and bodies of admonitions can also host annotations by adding the <code>annotate</code> modifier after the type qualifier, which is similar to how inline blocks work:</p> Admonition with annotations<pre><code>!!! note annotate \"Phasellus posuere in sem ut cursus (1)\"\n\n    Lorem ipsum dolor sit amet, (2) consectetur adipiscing elit. Nulla et\n    euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo\n    purus auctor massa, nec semper lorem quam in massa.\n\n1.  :man_raising_hand: I'm an annotation!\n2.  :woman_raising_hand: I'm an annotation as well!\n</code></pre> <p>Phasellus posuere in sem ut cursus (1)</p> <p>Lorem ipsum dolor sit amet, (2) consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <ol> <li> I'm an annotation!</li> <li> I'm an annotation as well!</li> </ol>"},{"location":"reference/annotations/#in-content-tabs","title":"in content tabs","text":"<p>Content tabs can host annotations by adding the <code>annotate</code> class to the block of a dedicated content tab (and not to the container, which is not supported):</p> Content tabs with annotations<pre><code>=== \"Tab 1\"\n\n    Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit.\n    { .annotate }\n\n    1.  :man_raising_hand: I'm an annotation!\n\n=== \"Tab 2\"\n\n    Phasellus posuere in sem ut cursus (1)\n    { .annotate }\n\n    1.  :woman_raising_hand: I'm an annotation as well!\n</code></pre> Tab 1Tab 2 <p>Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit.</p> <ol> <li> I'm an annotation!</li> </ol> <p>Phasellus posuere in sem ut cursus (1)</p> <ol> <li> I'm an annotation as well!</li> </ol>"},{"location":"reference/annotations/#in-everything-else","title":"in everything else","text":"<p>The Attribute Lists extension is the key ingredient for adding annotations to most elements, but it has some limitations. However, it's always possible to leverage the Markdown in HTML extension to wrap arbitrary elements with a <code>div</code> with the <code>annotate</code> class:</p> HTML with annotations<pre><code>&lt;div class=\"annotate\" markdown&gt;\n\n&gt; Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit.\n\n&lt;/div&gt;\n\n1.  :man_raising_hand: I'm an annotation!\n</code></pre> <p>Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit.</p> <ol> <li> I'm an annotation!</li> </ol> <p>With this trick, annotations can also be added to blockquotes, lists, and many other elements that are not supported by the Attribute Lists extension. Furthermore, note that code blocks follow different semantics.</p> <p>Known limitations</p> <p>Please note that annotations currently don't work in data tables as reported in #3453, as data tables are scrollable elements and positioning is very tricky to get right. This might be fixed in the future.</p>"},{"location":"reference/buttons/","title":"Buttons","text":"<p>Material for MkDocs provides dedicated styles for primary and secondary buttons that can be added to any link, <code>label</code> or <code>button</code> element. This is especially useful for documents or landing pages with dedicated call-to-actions.</p>"},{"location":"reference/buttons/#configuration","title":"Configuration","text":"<p>This configuration allows to add attributes to all inline- and block-level elements with a simple syntax, turning any link into a button. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n  - attr_list\n</code></pre> <p>See additional configuration options:</p> <ul> <li>Attribute Lists</li> </ul>"},{"location":"reference/buttons/#usage","title":"Usage","text":""},{"location":"reference/buttons/#adding-buttons","title":"Adding buttons","text":"<p>In order to render a link as a button, suffix it with curly braces and add the <code>.md-button</code> class selector to it. The button will receive the selected primary color and accent color if active.</p> Button<pre><code>[Subscribe to our newsletter](#){ .md-button }\n</code></pre> <p>Subscribe to our newsletter</p>"},{"location":"reference/buttons/#adding-primary-buttons","title":"Adding primary buttons","text":"<p>If you want to display a filled, primary button (like on the landing page of Material for MkDocs), add both, the <code>.md-button</code> and <code>.md-button--primary</code> CSS class selectors.</p> Button, primary<pre><code>[Subscribe to our newsletter](#){ .md-button .md-button--primary }\n</code></pre> <p>Subscribe to our newsletter</p>"},{"location":"reference/buttons/#adding-icon-buttons","title":"Adding icon buttons","text":"<p>Of course, icons can be added to all types of buttons by using the icon syntax together with any valid icon shortcode, which can be easily found with a few keystrokes through our icon search.</p> Button with icon<pre><code>[Send :fontawesome-solid-paper-plane:](#){ .md-button }\n</code></pre> <p>Send </p>"},{"location":"reference/code-blocks/","title":"Code blocks","text":"<p>Code blocks and examples are an essential part of technical project documentation. Material for MkDocs provides different ways to set up syntax highlighting for code blocks, either during build time using Pygments or during runtime using a JavaScript syntax highlighter.</p>"},{"location":"reference/code-blocks/#configuration","title":"Configuration","text":"<p>This configuration enables syntax highlighting on code blocks and inline code blocks, and allows to include source code directly from other files. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n  - pymdownx.highlight:\n      anchor_linenums: true\n      line_spans: __span\n      pygments_lang_class: true\n  - pymdownx.inlinehilite\n  - pymdownx.snippets\n  - pymdownx.superfences\n</code></pre> <p>The following sections discuss how to use different syntax highlighting features with Pygments, the recommended highlighter, so they don't apply when using a JavaScript syntax highlighter.</p> <p>See additional configuration options:</p> <ul> <li>Highlight</li> <li>InlineHilite</li> <li>SuperFences</li> <li>Snippets</li> </ul>"},{"location":"reference/code-blocks/#code-copy-button","title":"Code copy button","text":"<p>Code blocks can automatically render a button on the right side to allow the user to copy a code block's contents to the clipboard. Add the following to <code>mkdocs.yml</code> to enable them globally:</p> <pre><code>theme:\n  features:\n    - content.code.copy\n</code></pre> Enabling or disabling code copy buttons for a specific code block <p>If you don't want to enable code copy buttons globally, you can enable them for a specific code block by using a slightly different syntax based on the Attribute Lists extension:</p> <pre><code>``` { .yaml .copy }\n# Code block content\n```\n</code></pre> <p>Note that the language shortcode which has to come first must now also be prefixed by a <code>.</code>. Similarly, the copy button can also be disabled for a specific code block:</p> <pre><code>``` { .yaml .no-copy }\n# Code block content\n```\n</code></pre>"},{"location":"reference/code-blocks/#code-selection-button","title":"Code selection button","text":"<p>Code blocks can include a button to allow for the selection of line ranges by the user, which is perfect for linking to a specific subsection of a code block. This allows the user to apply line highlighting dynamically. Add the following to <code>mkdocs.yml</code> to enable it globally:</p> <pre><code>theme:\n  features:\n    - content.code.select\n</code></pre> Enabling or disabling code selection buttons for a specific code block <p>If you don't want to enable code selection buttons globally, you can enable them for a specific code block by using a slightly different syntax based on the Attribute Lists extension:</p> <pre><code>``` { .yaml .select }\n# Code block content\n```\n</code></pre> <p>Note that the language shortcode which has to come first must now also be prefixed by a <code>.</code>. Similarly, the selection button can also be disabled for a specific code block:</p> <pre><code>``` { .yaml .no-select }\n# Code block content\n```\n</code></pre>"},{"location":"reference/code-blocks/#code-annotations","title":"Code annotations","text":"<p>Code annotations offer a comfortable and friendly way to attach arbitrary content to specific sections of code blocks by adding numeric markers in block and inline comments in the language of the code block. Add the following to <code>mkdocs.yml</code> to enable them globally:</p> <pre><code>theme:\n  features:\n    - content.code.annotate # (1)!\n</code></pre> <ol> <li> I'm a code annotation! I can contain <code>code</code>, formatted     text, images, ... basically anything that can be written in Markdown.</li> </ol> Enabling code annotations for a specific code block <p>If you don't want to enable code annotations globally, because you don't like the automatic inlining behavior, you can enable them for a specific code block by using a slightly different syntax based on the Attribute Lists extension:</p> <pre><code>``` { .yaml .annotate }\n# Code block content\n```\n</code></pre> <p>Note that the language shortcode which has to come first must now also be prefixed by a <code>.</code>.</p>"},{"location":"reference/code-blocks/#custom-selectors","title":"Custom selectors","text":"<p>Normally, code annotations can only be placed in comments, as comments can be considered safe for placement. However, sometimes it might be necessary to place annotations in parts of the code block where comments are not allowed, e.g. in strings.</p> <p>Additional selectors can be set per-language:</p> <pre><code>extra:\n  annotate:\n    json: [.s2] # (1)!\n</code></pre> <ol> <li> <p><code>.s2</code> is the name of the lexeme that Pygments generates for double-quoted     strings. If you want to use a code annotation in another lexeme than a     comment, inspect the code block and determine which lexeme needs to be added     to the list of additional selectors.</p> <p>Important: Code annotations cannot be split between lexemes.</p> </li> </ol> <p>Now, code annotations can be used from within strings in JSON:</p> <pre><code>{\n  \"key\": \"value (1)\"\n}\n</code></pre> <ol> <li> I'm a code annotation! I can contain <code>code</code>, formatted     text, images, ... basically anything that can be written in Markdown.</li> </ol>"},{"location":"reference/code-blocks/#usage","title":"Usage","text":"<p>Code blocks must be enclosed with two separate lines containing three backticks. To add syntax highlighting to those blocks, add the language shortcode directly after the opening block. See the list of available lexers to find the shortcode for a given language:</p> Code block<pre><code>``` py\nimport tensorflow as tf\n```\n</code></pre> <pre><code>import tensorflow as tf\n</code></pre>"},{"location":"reference/code-blocks/#adding-a-title","title":"Adding a title","text":"<p>In order to provide additional context, a custom title can be added to a code block by using the <code>title=\"&lt;custom title&gt;\"</code> option directly after the shortcode, e.g. to display the name of a file:</p> Code block with title<pre><code>``` py title=\"bubble_sort.py\"\ndef bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n```\n</code></pre> bubble_sort.py<pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre>"},{"location":"reference/code-blocks/#adding-annotations","title":"Adding annotations","text":"<p>Code annotations can be placed anywhere in a code block where a comment for the language of the block can be placed, e.g. for JavaScript in <code>// ...</code> and <code>/* ... */</code>, for YAML in <code># ...</code>, etc.<sup>1</sup>:</p> Code block with annotation<pre><code>``` yaml\ntheme:\n  features:\n    - content.code.annotate # (1)\n```\n\n1.  :man_raising_hand: I'm a code annotation! I can contain `code`, __formatted\n    text__, images, ... basically anything that can be written in Markdown.\n</code></pre> <pre><code>theme:\n  features:\n    - content.code.annotate # (1)\n</code></pre> <ol> <li> I'm a code annotation! I can contain <code>code</code>, formatted     text, images, ... basically anything that can be written in Markdown.</li> </ol>"},{"location":"reference/code-blocks/#stripping-comments","title":"Stripping comments","text":"<p>If you wish to strip the comment characters surrounding a code annotation, simply add an <code>!</code> after the closing parenthesis of the code annotation:</p> Code block with annotation, stripped<pre><code>``` yaml\n# (1)!\n```\n\n1.  Look ma, less line noise!\n</code></pre> <pre><code># (1)!\n</code></pre> <ol> <li>Look ma, less line noise!</li> </ol> <p>Note that this only allows for a single code annotation to be rendered per comment. If you want to add multiple code annotations, comments cannot be stripped for technical reasons.</p>"},{"location":"reference/code-blocks/#adding-line-numbers","title":"Adding line numbers","text":"<p>Line numbers can be added to a code block by using the <code>linenums=\"&lt;start&gt;\"</code> option directly after the shortcode, whereas <code>&lt;start&gt;</code> represents the starting line number. A code block can start from a line number other than <code>1</code>, which allows to split large code blocks for readability:</p> Code block with line numbers<pre><code>``` py linenums=\"1\"\ndef bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n```\n</code></pre> <pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre>"},{"location":"reference/code-blocks/#highlighting-specific-lines","title":"Highlighting specific lines","text":"<p>Specific lines can be highlighted by passing the line numbers to the <code>hl_lines</code> argument placed right after the language shortcode. Note that line counts start at <code>1</code>, regardless of the starting line number specified as part of <code>linenums</code>:</p> LinesLine ranges Code block with highlighted lines<pre><code>``` py hl_lines=\"2 3\"\ndef bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n```\n</code></pre> <pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre> Code block with highlighted line range<pre><code>``` py hl_lines=\"3-5\"\ndef bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n```\n</code></pre> <pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre>"},{"location":"reference/code-blocks/#highlighting-inline-code-blocks","title":"Highlighting inline code blocks","text":"<p>When InlineHilite is enabled, syntax highlighting can be applied to inline code blocks by prefixing them with a shebang, i.e. <code>#!</code>, directly followed by the corresponding language shortcode.</p> Inline code block<pre><code>The `#!python range()` function is used to generate a sequence of numbers.\n</code></pre> <p>The <code>range()</code> function is used to generate a sequence of numbers.</p>"},{"location":"reference/code-blocks/#embedding-external-files","title":"Embedding external files","text":"<p>When Snippets is enabled, content from other files (including source files) can be embedded by using the <code>--8&lt;--</code> notation directly from within a code block:</p> Code block with external content<pre><code>``` title=\".browserslistrc\"\n--8&lt;-- \".browserslistrc\"\n```\n</code></pre> .browserslistrc<pre><code>last 4 years\n</code></pre>"},{"location":"reference/code-blocks/#customization","title":"Customization","text":""},{"location":"reference/code-blocks/#custom-syntax-theme","title":"Custom syntax theme","text":"<p>If Pygments is used, Material for MkDocs provides the styles for code blocks, which are built with a custom and well-balanced palette that works equally well for both color schemes:</p> <ul> <li> <code>--md-code-hl-number-color</code></li> <li> <code>--md-code-hl-special-color</code></li> <li> <code>--md-code-hl-function-color</code></li> <li> <code>--md-code-hl-constant-color</code></li> <li> <code>--md-code-hl-keyword-color</code></li> <li> <code>--md-code-hl-string-color</code></li> <li> <code>--md-code-hl-name-color</code></li> <li> <code>--md-code-hl-operator-color</code></li> <li> <code>--md-code-hl-punctuation-color</code></li> <li> <code>--md-code-hl-comment-color</code></li> <li> <code>--md-code-hl-generic-color</code></li> <li> <code>--md-code-hl-variable-color</code></li> </ul> <p>Code block foreground, background and line highlight colors are defined via:</p> <ul> <li> <code>--md-code-fg-color</code></li> <li> <code>--md-code-bg-color</code></li> <li> <code>--md-code-hl-color</code></li> </ul> <p>Let's say you want to change the color of <code>\"strings\"</code>. While there are several types of string tokens, they use the same color. You can assign a new color by using an additional style sheet:</p> <code>docs/stylesheets/extra.css</code> <code>mkdocs.yml</code> <pre><code>:root &gt; * {\n  --md-code-hl-string-color: #0FF1CE;\n}\n</code></pre> <pre><code>extra_css:\n  - stylesheets/extra.css\n</code></pre> <p>If you want to tweak a specific type of string, e.g. <code>`backticks`</code>, you can lookup the specific CSS class name in the syntax theme definition, and override it as part of your additional style sheet:</p> <code>docs/stylesheets/extra.css</code> <code>mkdocs.yml</code> <pre><code>.highlight .sb {\n  color: #0FF1CE;\n}\n</code></pre> <pre><code>extra_css:\n  - stylesheets/extra.css\n</code></pre>"},{"location":"reference/code-blocks/#annotation-tooltip-width","title":"Annotation tooltip width","text":"<p>If you have a lot of content hosted inside your code annotations, it can be a good idea to increase the width of the tooltip by adding the following as part of an additional style sheet:</p> <code>docs/stylesheets/extra.css</code> <code>mkdocs.yml</code> <pre><code>:root {\n  --md-tooltip-width: 600px;\n}\n</code></pre> <pre><code>extra_css:\n  - stylesheets/extra.css\n</code></pre> <p>This will render annotations with a larger width:</p> <pre><code># (1)!\n</code></pre> <ol> <li>Muuuuuuuuuuuuuuuch more space for content</li> </ol> <ol> <li> <p>Code annotations require syntax highlighting with Pygments \u2013 they're currently not compatible with JavaScript syntax highlighters, or languages that do not have comments in their grammar. However, we're actively working on supporting alternate ways of defining code annotations, allowing to always place code annotations at the end of lines.\u00a0\u21a9</p> </li> </ol>"},{"location":"reference/content-tabs/","title":"Content tabs","text":"<p>Sometimes, it's desirable to group alternative content under different tabs, e.g. when describing how to access an API from different languages or environments. Material for MkDocs allows for beautiful and functional tabs, grouping code blocks and other content.</p>"},{"location":"reference/content-tabs/#configuration","title":"Configuration","text":"<p>This configuration enables content tabs, and allows to nest arbitrary content inside content tabs, including code blocks and ... more content tabs! Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n  - pymdownx.superfences\n  - pymdownx.tabbed:\n      alternate_style: true\n</code></pre> <p>See additional configuration options:</p> <ul> <li>SuperFences</li> <li>Tabbed</li> </ul>"},{"location":"reference/content-tabs/#anchor-links","title":"Anchor links","text":"<p>In order to link to content tabs and share them more easily, an anchor link is automatically added to each content tab, which you can copy via right click or open in a new tab:</p> Open me in a new tab ...... or me ...... or even me <p>You can copy the link of the tab and create a link on the same or any other page. For example, you can jump to the third tab above this paragraph or to the publishing guide for Insiders.</p> <p>Readable anchor links</p> <p>Python Markdown Extensions 9.6 adds support for slugification of content tabs, which produces nicer looking and more readable anchor links. Enable the slugify function with the following lines:</p> <pre><code>markdown_extensions:\n  - pymdownx.tabbed:\n      slugify: !!python/object/apply:pymdownx.slugs.slugify\n        kwds:\n          case: lower\n</code></pre> <p>Fore more information, please see the extension guide.</p>"},{"location":"reference/content-tabs/#linked-content-tabs","title":"Linked content tabs","text":"<p>When enabled, all content tabs across the whole documentation site will be linked and switch to the same label when the user clicks on a tab. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>theme:\n  features:\n    - content.tabs.link\n</code></pre> <p>Content tabs are linked based on their label, not offset. This means that all tabs with the same label will be activated when a user clicks a content tab regardless of order inside a container. Furthermore, this feature is fully integrated with instant loading and persisted across page loads.</p> Feature enabledFeature disabled <p></p> <p></p>"},{"location":"reference/content-tabs/#usage","title":"Usage","text":""},{"location":"reference/content-tabs/#grouping-code-blocks","title":"Grouping code blocks","text":"<p>Code blocks are one of the primary targets to be grouped, and can be considered a special case of content tabs, as tabs with a single code block are always rendered without horizontal spacing:</p> Content tabs with code blocks<pre><code>=== \"C\"\n\n    ``` c\n    #include &lt;stdio.h&gt;\n\n    int main(void) {\n      printf(\"Hello world!\\n\");\n      return 0;\n    }\n    ```\n\n=== \"C++\"\n\n    ``` c++\n    #include &lt;iostream&gt;\n\n    int main(void) {\n      std::cout &lt;&lt; \"Hello world!\" &lt;&lt; std::endl;\n      return 0;\n    }\n    ```\n</code></pre> CC++ <pre><code>#include &lt;stdio.h&gt;\n\nint main(void) {\n  printf(\"Hello world!\\n\");\n  return 0;\n}\n</code></pre> <pre><code>#include &lt;iostream&gt;\n\nint main(void) {\n  std::cout &lt;&lt; \"Hello world!\" &lt;&lt; std::endl;\n  return 0;\n}\n</code></pre>"},{"location":"reference/content-tabs/#grouping-other-content","title":"Grouping other content","text":"<p>When a content tab contains more than one code block, it is rendered with horizontal spacing. Vertical spacing is never added, but can be achieved by nesting tabs in other blocks:</p> Content tabs<pre><code>=== \"Unordered list\"\n\n    * Sed sagittis eleifend rutrum\n    * Donec vitae suscipit est\n    * Nulla tempor lobortis orci\n\n=== \"Ordered list\"\n\n    1. Sed sagittis eleifend rutrum\n    2. Donec vitae suscipit est\n    3. Nulla tempor lobortis orci\n</code></pre> Unordered listOrdered list <ul> <li>Sed sagittis eleifend rutrum</li> <li>Donec vitae suscipit est</li> <li>Nulla tempor lobortis orci</li> </ul> <ol> <li>Sed sagittis eleifend rutrum</li> <li>Donec vitae suscipit est</li> <li>Nulla tempor lobortis orci</li> </ol>"},{"location":"reference/content-tabs/#embedded-content","title":"Embedded content","text":"<p>When SuperFences is enabled, content tabs can contain arbitrary nested content, including further content tabs, and can be nested in other blocks like admonitions or blockquotes:</p> Content tabs in admonition<pre><code>!!! example\n\n    === \"Unordered List\"\n\n        ``` markdown\n        * Sed sagittis eleifend rutrum\n        * Donec vitae suscipit est\n        * Nulla tempor lobortis orci\n        ```\n\n    === \"Ordered List\"\n\n        ``` markdown\n        1. Sed sagittis eleifend rutrum\n        2. Donec vitae suscipit est\n        3. Nulla tempor lobortis orci\n        ```\n</code></pre> <p>Example</p> Unordered ListOrdered List <pre><code>* Sed sagittis eleifend rutrum\n* Donec vitae suscipit est\n* Nulla tempor lobortis orci\n</code></pre> <pre><code>1. Sed sagittis eleifend rutrum\n2. Donec vitae suscipit est\n3. Nulla tempor lobortis orci\n</code></pre>"},{"location":"reference/data-tables/","title":"Data tables","text":"<p>Material for MkDocs defines default styles for data tables \u2013 an excellent way of rendering tabular data in project documentation. Furthermore, customizations like sortable tables can be achieved with a third-party library and some additional JavaScript.</p>"},{"location":"reference/data-tables/#configuration","title":"Configuration","text":"<p>This configuration enables Markdown table support, which should normally be enabled by default, but to be sure, add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n  - tables\n</code></pre> <p>See additional configuration options:</p> <ul> <li>Tables</li> </ul>"},{"location":"reference/data-tables/#usage","title":"Usage","text":"<p>Data tables can be used at any position in your project documentation and can contain arbitrary Markdown, including inline code blocks, as well as icons and emojis:</p> Data table<pre><code>| Method      | Description                          |\n| ----------- | ------------------------------------ |\n| `GET`       | :material-check:     Fetch resource  |\n| `PUT`       | :material-check-all: Update resource |\n| `DELETE`    | :material-close:     Delete resource |\n</code></pre> Method Description <code>GET</code>      Fetch resource <code>PUT</code>  Update resource <code>DELETE</code>      Delete resource"},{"location":"reference/data-tables/#column-alignment","title":"Column alignment","text":"<p>If you want to align a specific column to the <code>left</code>, <code>center</code> or <code>right</code>, you can use the regular Markdown syntax placing <code>:</code> characters at the beginning and/or end of the divider.</p> LeftCenterRight Data table, columns aligned to left<pre><code>| Method      | Description                          |\n| :---------- | :----------------------------------- |\n| `GET`       | :material-check:     Fetch resource  |\n| `PUT`       | :material-check-all: Update resource |\n| `DELETE`    | :material-close:     Delete resource |\n</code></pre> Method Description <code>GET</code>      Fetch resource <code>PUT</code>  Update resource <code>DELETE</code>      Delete resource Data table, columns centered<pre><code>| Method      | Description                          |\n| :---------: | :----------------------------------: |\n| `GET`       | :material-check:     Fetch resource  |\n| `PUT`       | :material-check-all: Update resource |\n| `DELETE`    | :material-close:     Delete resource |\n</code></pre> Method Description <code>GET</code>      Fetch resource <code>PUT</code>  Update resource <code>DELETE</code>      Delete resource Data table, columns aligned to right<pre><code>| Method      | Description                          |\n| ----------: | -----------------------------------: |\n| `GET`       | :material-check:     Fetch resource  |\n| `PUT`       | :material-check-all: Update resource |\n| `DELETE`    | :material-close:     Delete resource |\n</code></pre> Method Description <code>GET</code>      Fetch resource <code>PUT</code>  Update resource <code>DELETE</code>      Delete resource"},{"location":"reference/data-tables/#customization","title":"Customization","text":""},{"location":"reference/data-tables/#sortable-tables","title":"Sortable tables","text":"<p>If you want to make data tables sortable, you can add tablesort, which is natively integrated with Material for MkDocs and will also work with instant loading via additional JavaScript:</p> <code>docs/javascripts/tablesort.js</code> <code>mkdocs.yml</code> <pre><code>document$.subscribe(function() {\n  var tables = document.querySelectorAll(\"article table:not([class])\")\n  tables.forEach(function(table) {\n    new Tablesort(table)\n  })\n})\n</code></pre> <pre><code>extra_javascript:\n  - https://unpkg.com/tablesort@5.3.0/dist/tablesort.min.js\n  - javascripts/tablesort.js\n</code></pre> <p>After applying the customization, data tables can be sorted by clicking on a column:</p> Data table, columns sortable<pre><code>| Method      | Description                          |\n| ----------- | ------------------------------------ |\n| `GET`       | :material-check:     Fetch resource  |\n| `PUT`       | :material-check-all: Update resource |\n| `DELETE`    | :material-close:     Delete resource |\n</code></pre> Method Description <code>GET</code>      Fetch resource <code>PUT</code>  Update resource <code>DELETE</code>      Delete resource <p>Note that tablesort provides alternative comparison implementations like numbers, filesizes, dates and month names. See the tablesort documentation for more information.</p>"},{"location":"reference/data-tables/#import-table-from-file","title":"Import table from file","text":"<p>The plugin mkdocs-table-reader-plugin allows you to import data from a CSV or Excel file.</p>"},{"location":"reference/diagrams/","title":"Diagrams","text":"<p>Diagrams help to communicate complex relationships and interconnections between different technical components, and are a great addition to project documentation. Material for MkDocs integrates with Mermaid.js, a very popular and flexible solution for drawing diagrams.</p>"},{"location":"reference/diagrams/#configuration","title":"Configuration","text":"<p>This configuration enables native support for Mermaid.js diagrams. Material for MkDocs will automatically initialize the JavaScript runtime when a page  includes a <code>mermaid</code> code block:</p> <pre><code>markdown_extensions:\n  - pymdownx.superfences:\n      custom_fences:\n        - name: mermaid\n          class: mermaid\n          format: !!python/name:pymdownx.superfences.fence_code_format\n</code></pre> <p>No further configuration is necessary. Advantages over a custom integration:</p> <ul> <li> Works with instant loading without any additional effort</li> <li> Diagrams automatically use fonts and colors defined in <code>mkdocs.yml</code><sup>1</sup></li> <li> Fonts and colors can be customized with additional style sheets</li> <li> Support for both, light and dark color schemes \u2013 try it on this page!</li> </ul>"},{"location":"reference/diagrams/#usage","title":"Usage","text":""},{"location":"reference/diagrams/#using-flowcharts","title":"Using flowcharts","text":"<p>Flowcharts are diagrams that represent workflows or processes. The steps are rendered as nodes of various kinds and are connected by edges, describing the necessary order of steps:</p> Flow chart<pre><code>``` mermaid\ngraph LR\n  A[Start] --&gt; B{Error?};\n  B --&gt;|Yes| C[Hmm...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Yay!];\n```\n</code></pre> <pre><code>graph LR\n  A[Start] --&gt; B{Error?};\n  B --&gt;|Yes| C[Hmm...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Yay!];</code></pre>"},{"location":"reference/diagrams/#using-sequence-diagrams","title":"Using sequence diagrams","text":"<p>Sequence diagrams describe a specific scenario as sequential interactions  between multiple objects or actors, including the messages that are exchanged between those actors:</p> Sequence diagram<pre><code>``` mermaid\nsequenceDiagram\n  autonumber\n  Alice-&gt;&gt;John: Hello John, how are you?\n  loop Healthcheck\n      John-&gt;&gt;John: Fight against hypochondria\n  end\n  Note right of John: Rational thoughts!\n  John--&gt;&gt;Alice: Great!\n  John-&gt;&gt;Bob: How about you?\n  Bob--&gt;&gt;John: Jolly good!\n```\n</code></pre> <pre><code>sequenceDiagram\n  autonumber\n  Alice-&gt;&gt;John: Hello John, how are you?\n  loop Healthcheck\n      John-&gt;&gt;John: Fight against hypochondria\n  end\n  Note right of John: Rational thoughts!\n  John--&gt;&gt;Alice: Great!\n  John-&gt;&gt;Bob: How about you?\n  Bob--&gt;&gt;John: Jolly good!</code></pre>"},{"location":"reference/diagrams/#using-state-diagrams","title":"Using state diagrams","text":"<p>State diagrams are a great tool to describe the behavior of a system, decomposing it into a finite number of states, and transitions between those states:</p> State diagram<pre><code>``` mermaid\nstateDiagram-v2\n  state fork_state &lt;&lt;fork&gt;&gt;\n    [*] --&gt; fork_state\n    fork_state --&gt; State2\n    fork_state --&gt; State3\n\n    state join_state &lt;&lt;join&gt;&gt;\n    State2 --&gt; join_state\n    State3 --&gt; join_state\n    join_state --&gt; State4\n    State4 --&gt; [*]\n```\n</code></pre> <pre><code>stateDiagram-v2\n  state fork_state &lt;&lt;fork&gt;&gt;\n    [*] --&gt; fork_state\n    fork_state --&gt; State2\n    fork_state --&gt; State3\n\n    state join_state &lt;&lt;join&gt;&gt;\n    State2 --&gt; join_state\n    State3 --&gt; join_state\n    join_state --&gt; State4\n    State4 --&gt; [*]</code></pre>"},{"location":"reference/diagrams/#using-class-diagrams","title":"Using class diagrams","text":"<p>Class diagrams are central to object oriented programming, describing the structure of a system by modelling entities as classes and relationships between them:</p> Class diagram<pre><code>``` mermaid\nclassDiagram\n  Person &lt;|-- Student\n  Person &lt;|-- Professor\n  Person : +String name\n  Person : +String phoneNumber\n  Person : +String emailAddress\n  Person: +purchaseParkingPass()\n  Address \"1\" &lt;-- \"0..1\" Person:lives at\n  class Student{\n    +int studentNumber\n    +int averageMark\n    +isEligibleToEnrol()\n    +getSeminarsTaken()\n  }\n  class Professor{\n    +int salary\n  }\n  class Address{\n    +String street\n    +String city\n    +String state\n    +int postalCode\n    +String country\n    -validate()\n    +outputAsLabel()  \n  }\n```\n</code></pre> <pre><code>classDiagram\n  Person &lt;|-- Student\n  Person &lt;|-- Professor\n  Person : +String name\n  Person : +String phoneNumber\n  Person : +String emailAddress\n  Person: +purchaseParkingPass()\n  Address \"1\" &lt;-- \"0..1\" Person:lives at\n  class Student{\n    +int studentNumber\n    +int averageMark\n    +isEligibleToEnrol()\n    +getSeminarsTaken()\n  }\n  class Professor{\n    +int salary\n  }\n  class Address{\n    +String street\n    +String city\n    +String state\n    +int postalCode\n    +String country\n    -validate()\n    +outputAsLabel()  \n  }</code></pre>"},{"location":"reference/diagrams/#using-entity-relationship-diagrams","title":"Using entity-relationship diagrams","text":"<p>An entity-relationship diagram is composed of entity types and specifies relationships that exist between entities. It describes inter-related things in a specific domain of knowledge:</p> Entity-relationship diagram<pre><code>``` mermaid\nerDiagram\n  CUSTOMER ||--o{ ORDER : places\n  ORDER ||--|{ LINE-ITEM : contains\n  LINE-ITEM {\n    string name\n    int pricePerUnit\n  }\n  CUSTOMER }|..|{ DELIVERY-ADDRESS : uses\n```\n</code></pre> <pre><code>erDiagram\n  CUSTOMER ||--o{ ORDER : places\n  ORDER ||--|{ LINE-ITEM : contains\n  LINE-ITEM {\n    string name\n    int pricePerUnit\n  }\n  CUSTOMER }|..|{ DELIVERY-ADDRESS : uses</code></pre>"},{"location":"reference/diagrams/#other-diagram-types","title":"Other diagram types","text":"<p>Besides the diagram types listed above, Mermaid.js provides support for pie charts, gantt charts, user journeys, git graphs and requirement diagrams, all of which are not officially supported by Material for MkDocs. Those diagrams should still work as advertised by Mermaid.js, but we don't consider them a good choice, mostly as they don't work well on mobile.</p> <ol> <li> <p>While all Mermaid.js features should work out-of-the-box, Material for MkDocs will currently only adjust the fonts and colors for flowcharts, sequence diagrams, class diagrams, state diagrams and entity relationship  diagrams. See the section on other diagrams for more information why this is currently not implemented for all diagrams.\u00a0\u21a9</p> </li> </ol>"},{"location":"reference/footnotes/","title":"Footnotes","text":"<p>Footnotes are a great way to add supplemental or additional information to a specific word, phrase or sentence without interrupting the flow of a document. Material for MkDocs provides the ability to define, reference and render footnotes.</p>"},{"location":"reference/footnotes/#configuration","title":"Configuration","text":"<p>This configuration adds the ability to define inline footnotes, which are then rendered below all Markdown content of a document. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n  - footnotes\n</code></pre> <p>See additional configuration options:</p> <ul> <li>Footnotes</li> </ul>"},{"location":"reference/footnotes/#footnote-tooltips","title":"Footnote tooltips","text":"<p>Insiders allows to render footnotes as inline tooltips, so the user can read the footnote without leaving the context of the document. Footnote tooltips can be enabled in <code>mkdocs.yml</code> with:</p> <pre><code>theme:\n  features:\n    - content.footnote.tooltips\n</code></pre> <p>Footnote tooltips are enabled on our documentation, so to try it out, you can just hover or focus any footnote on this page or any other page of our documentation.</p>"},{"location":"reference/footnotes/#usage","title":"Usage","text":""},{"location":"reference/footnotes/#adding-footnote-references","title":"Adding footnote references","text":"<p>A footnote reference must be enclosed in square brackets and must start with a caret <code>^</code>, directly followed by an arbitrary identifier, which is similar to the standard Markdown link syntax.</p> Text with footnote references<pre><code>Lorem ipsum[^1] dolor sit amet, consectetur adipiscing elit.[^2]\n</code></pre> <p>Lorem ipsum<sup>1</sup> dolor sit amet, consectetur adipiscing elit.<sup>2</sup></p>"},{"location":"reference/footnotes/#adding-footnote-content","title":"Adding footnote content","text":"<p>The footnote content must be declared with the same identifier as the reference. It can be inserted at an arbitrary position in the document and is always rendered at the bottom of the page. Furthermore, a backlink to the footnote reference is automatically added.</p>"},{"location":"reference/footnotes/#on-a-single-line","title":"on a single line","text":"<p>Short footnotes can be written on the same line:</p> Footnote<pre><code>[^1]: Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n</code></pre> <p> Jump to footnote</p>"},{"location":"reference/footnotes/#on-multiple-lines","title":"on multiple lines","text":"<p>Paragraphs can be written on the next line and must be indented by four spaces:</p> Footnote<pre><code>[^2]:\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.\n</code></pre> <p> Jump to footnote</p> <ol> <li> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.\u00a0\u21a9</p> </li> <li> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.\u00a0\u21a9</p> </li> </ol>"},{"location":"reference/formatting/","title":"Formatting","text":"<p>Material for MkDocs provides support for several HTML elements that can be used to highlight sections of a document or apply specific formatting. Additionally, Critic Markup is supported, adding the ability to display suggested changes for a document.</p>"},{"location":"reference/formatting/#configuration","title":"Configuration","text":"<p>This configuration enables support for keyboard keys, tracking changes in documents, defining sub- and superscript and highlighting text. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n  - pymdownx.critic\n  - pymdownx.caret\n  - pymdownx.keys\n  - pymdownx.mark\n  - pymdownx.tilde\n</code></pre> <p>See additional configuration options:</p> <ul> <li>Critic</li> <li>Caret, Mark &amp; Tilde</li> <li>Keys</li> </ul>"},{"location":"reference/formatting/#usage","title":"Usage","text":""},{"location":"reference/formatting/#highlighting-changes","title":"Highlighting changes","text":"<p>When Critic is enabled, Critic Markup can be used, which adds the ability to highlight suggested changes, as well as add inline comments to a document:</p> Text with suggested changes<pre><code>Text can be {--deleted--} and replacement text {++added++}. This can also be\ncombined into {~~one~&gt;a single~~} operation. {==Highlighting==} is also\npossible {&gt;&gt;and comments can be added inline&lt;&lt;}.\n\n{==\n\nFormatting can also be applied to blocks by putting the opening and closing\ntags on separate lines and adding new lines between the tags and the content.\n\n==}\n</code></pre> <p>Text can be deleted and replacement text added. This can also be combined into onea single operation. Highlighting is also possible and comments can be added inline.</p> <p>       Formatting can also be applied to blocks by putting the opening and       closing tags on separate lines and adding new lines between the tags and       the content.     </p>"},{"location":"reference/formatting/#highlighting-text","title":"Highlighting text","text":"<p>When Caret, Mark &amp; Tilde are enabled, text can be highlighted with a simple syntax, which is more convenient that directly using the corresponding <code>mark</code>, <code>ins</code> and <code>del</code> HTML tags:</p> Text with highlighting<pre><code>- ==This was marked (highlight)==\n- ^^This was inserted (underline)^^\n- ~~This was deleted (strikethrough)~~\n</code></pre> <ul> <li>This was marked (highlight)</li> <li>This was inserted (underline)</li> <li>This was deleted (strikethrough)</li> </ul>"},{"location":"reference/formatting/#sub-and-superscripts","title":"Sub- and superscripts","text":"<p>When Caret &amp; Tilde are enabled, text can be sub- and superscripted with a simple syntax, which is more convenient than directly using the corresponding <code>sub</code> and <code>sup</code> HTML tags:</p> Text with sub- and superscripts<pre><code>- H~2~O\n- A^T^A\n</code></pre> <ul> <li>H<sub>2</sub>O</li> <li>A<sup>T</sup>A</li> </ul>"},{"location":"reference/formatting/#adding-keyboard-keys","title":"Adding keyboard keys","text":"<p>When Keys is enabled, keyboard keys can be rendered with a simple syntax. Consult the Python Markdown Extensions documentation to learn about all available shortcodes:</p> Keyboard keys<pre><code>++ctrl+alt+del++\n</code></pre> <p>Ctrl+Alt+Del</p>"},{"location":"reference/grids/","title":"Grids","text":"<p>Material for MkDocs makes it easy to arrange sections into grids, grouping blocks that convey similar meaning or are of equal importance. Grids are just perfect for building index pages that show a brief overview of a large section of your documentation.</p>"},{"location":"reference/grids/#configuration","title":"Configuration","text":"<p>This configuration enables the use of grids, allowing to bring blocks of identical or different types into a rectangular shape. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions: # (1)!\n  - attr_list\n  - md_in_html\n</code></pre> <ol> <li>Note that some of the examples listed below use icons and emojis, which     have to be configured separately.</li> </ol> <p>See additional configuration options:</p> <ul> <li>Attribute Lists</li> <li>Markdown in HTML</li> </ul>"},{"location":"reference/grids/#usage","title":"Usage","text":"<p>Grids come in two flavors: card grids, which wrap each element in a card that levitates on hover, and generic grids, which allow to arrange arbitrary block elements in a rectangular shape.</p>"},{"location":"reference/grids/#using-card-grids","title":"Using card grids","text":"<p>Card grids wrap each grid item with a beautiful hover card that levitates on hover. They come in two slightly different syntaxes: list and block syntax, adding support for distinct use cases.</p>"},{"location":"reference/grids/#list-syntax","title":"List syntax","text":"<p>The list syntax is essentially a shortcut for card grids, and consists of an unordered (or ordered) list wrapped by a <code>div</code> with both, the <code>grid</code> and <code>cards</code> classes:</p> Card grid<pre><code>&lt;div class=\"grid cards\" markdown&gt;\n\n- :fontawesome-brands-html5: __HTML__ for content and structure\n- :fontawesome-brands-js: __JavaScript__ for interactivity\n- :fontawesome-brands-css3: __CSS__ for text running out of boxes\n- :fontawesome-brands-internet-explorer: __Internet Explorer__ ... huh?\n\n&lt;/div&gt;\n</code></pre> <ul> <li> HTML for content and structure</li> <li> JavaScript for interactivity</li> <li> CSS for text running out of boxes</li> <li> Internet Explorer ... huh?</li> </ul> <p>List elements can contain arbitrary Markdown, as long as the surrounding <code>div</code> defines the <code>markdown</code> attribute. Following is a more complex example, which includes icons and links:</p> Card grid, complex example<pre><code>&lt;div class=\"grid cards\" markdown&gt;\n\n-   :material-clock-fast:{ .lg .middle } __Set up in 5 minutes__\n\n    ---\n\n    Install [`mkdocs-material`](#) with [`pip`](#) and get up\n    and running in minutes\n\n    [:octicons-arrow-right-24: Getting started](#)\n\n-   :fontawesome-brands-markdown:{ .lg .middle } __It's just Markdown__\n\n    ---\n\n    Focus on your content and generate a responsive and searchable static site\n\n    [:octicons-arrow-right-24: Reference](#)\n\n-   :material-format-font:{ .lg .middle } __Made to measure__\n\n    ---\n\n    Change the colors, fonts, language, icons, logo and more with a few lines\n\n    [:octicons-arrow-right-24: Customization](#)\n\n-   :material-scale-balance:{ .lg .middle } __Open Source, MIT__\n\n    ---\n\n    Material for MkDocs is licensed under MIT and available on [GitHub]\n\n    [:octicons-arrow-right-24: License](#)\n\n&lt;/div&gt;\n</code></pre> <ul> <li> <p> Set up in 5 minutes</p> <p>Install <code>mkdocs-material</code> with <code>pip</code> and get up and running in minutes</p> <p> Getting started</p> </li> <li> <p> It's just Markdown</p> <p>Focus on your content and generate a responsive and searchable static site</p> <p> Reference</p> </li> <li> <p> Made to measure</p> <p>Change the colors, fonts, language, icons, logo and more with a few lines</p> <p> Customization</p> </li> <li> <p> Open Source, MIT</p> <p>Material for MkDocs is licensed under MIT and available on GitHub</p> <p> License</p> </li> </ul> <p>If there's insufficient space to render grid items next to each other, the items will stretch to the full width of the viewport, e.g. on mobile viewports. If there's more space available, grids will render in items of 3 and more, e.g. when hiding both sidebars.</p>"},{"location":"reference/grids/#block-syntax","title":"Block syntax","text":"<p>The block syntax allows for arranging cards in grids together with other elements, as explained in the section on generic grids. Just add the <code>card</code> class to any block element inside a <code>grid</code>:</p> Card grid, blocks<pre><code>&lt;div class=\"grid\" markdown&gt;\n\n:fontawesome-brands-html5: __HTML__ for content and structure\n{ .card }\n\n:fontawesome-brands-js: __JavaScript__ for interactivity\n{ .card }\n\n:fontawesome-brands-css3: __CSS__ for text running out of boxes\n{ .card }\n\n&gt; :fontawesome-brands-internet-explorer: __Internet Explorer__ ... huh?\n\n&lt;/div&gt;\n</code></pre> <p> HTML for content and structure</p> <p> JavaScript for interactivity</p> <p> CSS for text running out of boxes</p> <p> Internet Explorer ... huh?</p> <p>While this syntax may seem unnecessarily verbose at first, the previous example shows how card grids can now be mixed with other elements that will also stretch to the grid.</p>"},{"location":"reference/grids/#using-generic-grids","title":"Using generic grids","text":"<p>Generic grids allow for arranging arbitrary block elements in a grid, including admonitions, code blocks, content tabs and more. Just wrap a set of blocks by using a <code>div</code> with the <code>grid</code> class:</p> Generic grid<pre><code>&lt;div class=\"grid\" markdown&gt;\n\n=== \"Unordered list\"\n\n    * Sed sagittis eleifend rutrum\n    * Donec vitae suscipit est\n    * Nulla tempor lobortis orci\n\n=== \"Ordered list\"\n\n    1. Sed sagittis eleifend rutrum\n    2. Donec vitae suscipit est\n    3. Nulla tempor lobortis orci\n\n``` title=\"Content tabs\"\n=== \"Unordered list\"\n\n    * Sed sagittis eleifend rutrum\n    * Donec vitae suscipit est\n    * Nulla tempor lobortis orci\n\n=== \"Ordered list\"\n\n    1. Sed sagittis eleifend rutrum\n    2. Donec vitae suscipit est\n    3. Nulla tempor lobortis orci\n```\n\n&lt;/div&gt;\n</code></pre> Unordered listOrdered list <ul> <li>Sed sagittis eleifend rutrum</li> <li>Donec vitae suscipit est</li> <li>Nulla tempor lobortis orci</li> </ul> <ol> <li>Sed sagittis eleifend rutrum</li> <li>Donec vitae suscipit est</li> <li>Nulla tempor lobortis orci</li> </ol> Content tabs<pre><code>=== \"Unordered list\"\n\n    * Sed sagittis eleifend rutrum\n    * Donec vitae suscipit est\n    * Nulla tempor lobortis orci\n\n=== \"Ordered list\"\n\n    1. Sed sagittis eleifend rutrum\n    2. Donec vitae suscipit est\n    3. Nulla tempor lobortis orci\n</code></pre>"},{"location":"reference/icons-emojis/","title":"Icons, Emojis","text":"<p>One of the best features of Material for MkDocs is the possibility to use more than 10,000 icons and thousands of emojis in your project documentation with practically zero additional effort. Moreover, custom icons can be added and used in <code>mkdocs.yml</code>, documents and templates.</p>"},{"location":"reference/icons-emojis/#search","title":"Search","text":"All Icons Emojis <p> Tip: Enter some keywords to find icons and emojis and click on the   shortcode to copy it to your clipboard. </p>"},{"location":"reference/icons-emojis/#configuration","title":"Configuration","text":"<p>This configuration enables the use of icons and emojis by using simple shortcodes which can be discovered through the icon search. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n  - attr_list\n  - pymdownx.emoji:\n      emoji_index: !!python/name:material.extensions.emoji.twemoji\n      emoji_generator: !!python/name:material.extensions.emoji.to_svg\n</code></pre> <p>The following icon sets are bundled with Material for MkDocs:</p> <ul> <li> \u2013 Material Design</li> <li> \u2013 FontAwesome</li> <li> \u2013 Octicons</li> <li> \u2013 Simple Icons</li> </ul> <p>See additional configuration options:</p> <ul> <li>Attribute Lists</li> <li>Emoji</li> <li>Emoji with custom icons</li> </ul>"},{"location":"reference/icons-emojis/#usage","title":"Usage","text":""},{"location":"reference/icons-emojis/#using-emojis","title":"Using emojis","text":"<p>Emojis can be integrated in Markdown by putting the shortcode of the emoji between two colons. If you're using Twemoji (recommended), you can look up the shortcodes at Emojipedia:</p> Emoji<pre><code>:smile:\n</code></pre> <p></p>"},{"location":"reference/icons-emojis/#using-icons","title":"Using icons","text":"<p>When Emoji is enabled, icons can be used similar to emojis, by referencing a valid path to any icon bundled with the theme, which are located in the <code>.icons</code> directory, and replacing <code>/</code> with <code>-</code>:</p> Icon<pre><code>:fontawesome-regular-face-laugh-wink:\n</code></pre> <p></p>"},{"location":"reference/icons-emojis/#with-colors","title":"with colors","text":"<p>When Attribute Lists is enabled, custom CSS classes can be added to icons by suffixing the icon with a special syntax. While HTML allows to use inline styles, it's always recommended to add an additional style sheet and move declarations into dedicated CSS classes:</p> <code>docs/stylesheets/extra.css</code> <code>mkdocs.yml</code> <pre><code>.youtube {\n  color: #EE0F0F;\n}\n</code></pre> <pre><code>extra_css:\n  - stylesheets/extra.css\n</code></pre> <p>After applying the customization, add the CSS class to the icon shortcode:</p> Icon with color<pre><code>:fontawesome-brands-youtube:{ .youtube }\n</code></pre> <p></p>"},{"location":"reference/icons-emojis/#with-animations","title":"with animations","text":"<p>Similar to adding colors, it's just as easy to add animations to icons by using an additional style sheet, defining a <code>@keyframes</code> rule and adding a dedicated CSS class to the icon:</p> <code>docs/stylesheets/extra.css</code> <code>mkdocs.yml</code> <pre><code>@keyframes heart {\n  0%, 40%, 80%, 100% {\n    transform: scale(1);\n  }\n  20%, 60% {\n    transform: scale(1.15);\n  }\n}\n.heart {\n  animation: heart 1000ms infinite;\n}\n</code></pre> <pre><code>extra_css:\n  - stylesheets/extra.css\n</code></pre> <p>After applying the customization, add the CSS class to the icon shortcode:</p> Icon with animation<pre><code>:octicons-heart-fill-24:{ .heart }\n</code></pre> <p></p>"},{"location":"reference/icons-emojis/#icons-emojis-in-sidebars","title":"Icons, emojis in sidebars","text":"<p>With the help of the built-in typeset plugin, you can use icons and emojis in headings, which will then be rendered in the sidebars. The plugin preserves Markdown and HTML formatting.</p>"},{"location":"reference/icons-emojis/#customization","title":"Customization","text":""},{"location":"reference/icons-emojis/#using-icons-in-templates","title":"Using icons in templates","text":"<p>When you're extending the theme with partials or blocks, you can simply reference any icon that's bundled with the theme with Jinja's <code>include</code> function and wrap it with the <code>.twemoji</code> CSS class:</p> <pre><code>&lt;span class=\"twemoji\"&gt;\n  {% include \".icons/fontawesome/brands/youtube.svg\" %} &lt;!-- (1)! --&gt;\n&lt;/span&gt;\n</code></pre> <ol> <li> <p>Enter a few keywords to find the perfect icon using our icon search and     click on the shortcode to copy it to your clipboard:</p> <p> <ol></ol> </p> </li> </ol> <p>This is exactly what Material for MkDocs does in its templates.</p>"},{"location":"reference/images/","title":"Images","text":"<p>While images are first-class citizens of Markdown and part of the core syntax, it can be difficult to work with them. Material for MkDocs makes working with images more comfortable, providing styles for image alignment and image captions.</p>"},{"location":"reference/images/#configuration","title":"Configuration","text":"<p>This configuration adds the ability to align images, add captions to images (rendering them as figures), and mark large images for lazy-loading. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n  - attr_list\n  - md_in_html\n</code></pre> <p>See additional configuration options:</p> <ul> <li>Attribute Lists</li> <li>Markdown in HTML</li> </ul>"},{"location":"reference/images/#lightbox","title":"Lightbox","text":"<p>If you want to add image zoom functionality to your documentation, the glightbox plugin is an excellent choice, as it integrates perfectly with Material for MkDocs. Install it with <code>pip</code>:</p> <pre><code>pip install mkdocs-glightbox\n</code></pre> <p>Then, add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>plugins:\n  - glightbox\n</code></pre> <p>We recommend checking out the available configuration options.</p>"},{"location":"reference/images/#usage","title":"Usage","text":""},{"location":"reference/images/#image-alignment","title":"Image alignment","text":"<p>When Attribute Lists is enabled, images can be aligned by adding the respective alignment directions via the <code>align</code> attribute, i.e. <code>align=left</code> or <code>align=right</code>:</p> LeftRight Image, aligned to left<pre><code>![Image title](https://dummyimage.com/600x400/eee/aaa){ align=left }\n</code></pre> <p></p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> Image, aligned to right<pre><code>![Image title](https://dummyimage.com/600x400/eee/aaa){ align=right }\n</code></pre> <p></p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>If there's insufficient space to render the text next to the image, the image will stretch to the full width of the viewport, e.g. on mobile viewports.</p> Why is there no centered alignment? <p>The <code>align</code> attribute doesn't allow for centered alignment, which is why this option is not supported by Material for MkDocs.<sup>1</sup> Instead, the image captions syntax can be used, as captions are optional.</p>"},{"location":"reference/images/#image-captions","title":"Image captions","text":"<p>Sadly, the Markdown syntax doesn't provide native support for image captions, but it's always possible to use the Markdown in HTML extension with literal <code>figure</code> and <code>figcaption</code> tags:</p> Image with caption<pre><code>&lt;figure markdown=\"span\"&gt;\n  ![Image title](https://dummyimage.com/600x400/){ width=\"300\" }\n  &lt;figcaption&gt;Image caption&lt;/figcaption&gt;\n&lt;/figure&gt;\n</code></pre> Image caption"},{"location":"reference/images/#image-lazy-loading","title":"Image lazy-loading","text":"<p>Modern browsers provide native support for lazy-loading images through the <code>loading=lazy</code> directive, which degrades to eager-loading in browsers without support:</p> Image, lazy-loaded<pre><code>![Image title](https://dummyimage.com/600x400/){ loading=lazy }\n</code></pre> <p></p>"},{"location":"reference/images/#light-and-dark-mode","title":"Light and dark mode","text":"<p>If you added a color palette toggle and want to show different images for light and dark color schemes, you can append a <code>#only-light</code> or <code>#only-dark</code> hash fragment to the image URL:</p> Image, different for light and dark mode<pre><code>![Image title](https://dummyimage.com/600x400/f5f5f5/aaaaaa#only-light)\n![Image title](https://dummyimage.com/600x400/21222c/d5d7e2#only-dark)\n</code></pre> <p> </p> <p>Requirements when using custom color schemes</p> <p>The built-in color schemes define the aforementioned hash fragments, but if you're using custom color schemes, you'll also have to add the following selectors to your scheme, depending on whether it's a light or dark scheme:</p> Custom light schemeCustom dark scheme <pre><code>[data-md-color-scheme=\"custom-light\"] img[src$=\"#only-dark\"],\n[data-md-color-scheme=\"custom-light\"] img[src$=\"#gh-dark-mode-only\"] {\n  display: none; /* Hide dark images in light mode */\n}\n</code></pre> <pre><code>[data-md-color-scheme=\"custom-dark\"] img[src$=\"#only-light\"],\n[data-md-color-scheme=\"custom-dark\"] img[src$=\"#gh-light-mode-only\"] {\n  display: none; /* Hide light images in dark mode */\n}\n</code></pre> <p>Remember to change <code>\"custom-light\"</code> and <code>\"custom-dark\"</code> to the name of your scheme.</p> <ol> <li> <p>You might also realize that the <code>align</code> attribute has been deprecated as of HTML5, so why use it anyways? The main reason is portability \u2013 it's still supported by all browsers and clients, and is very unlikely to be completely removed, as many older websites still use it. This ensures a consistent appearance when a Markdown file with these attributes is viewed outside of a website generated by Material for MkDocs.\u00a0\u21a9</p> </li> </ol>"},{"location":"reference/lists/","title":"Lists","text":"<p>Material for MkDocs supports several flavors of lists that cater to different use cases, including unordered lists and ordered lists, which are supported through standard Markdown, as well as definition lists and task lists, which are supported through extensions.</p>"},{"location":"reference/lists/#configuration","title":"Configuration","text":"<p>This configuration enables the use of definition lists and tasks lists, which are both not part of the standard Markdown syntax. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n  - def_list\n  - pymdownx.tasklist:\n      custom_checkbox: true\n</code></pre> <p>See additional configuration options:</p> <ul> <li>Definition Lists</li> <li>Tasklist</li> </ul>"},{"location":"reference/lists/#usage","title":"Usage","text":""},{"location":"reference/lists/#using-unordered-lists","title":"Using unordered lists","text":"<p>Unordered lists can be written by prefixing a line with a <code>-</code>, <code>*</code> or <code>+</code> list marker, all of which can be used interchangeably. Furthermore, all flavors of lists can be nested inside each other:</p> List, unordered<pre><code>- Nulla et rhoncus turpis. Mauris ultricies elementum leo. Duis efficitur\n  accumsan nibh eu mattis. Vivamus tempus velit eros, porttitor placerat nibh\n  lacinia sed. Aenean in finibus diam.\n\n    * Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis.\n    * Nam vulputate tincidunt fringilla.\n    * Nullam dignissim ultrices urna non auctor.\n</code></pre> <ul> <li> <p>Nulla et rhoncus turpis. Mauris ultricies elementum leo. Duis efficitur   accumsan nibh eu mattis. Vivamus tempus velit eros, porttitor placerat nibh   lacinia sed. Aenean in finibus diam.</p> <ul> <li>Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis.</li> <li>Nam vulputate tincidunt fringilla.</li> <li>Nullam dignissim ultrices urna non auctor.</li> </ul> </li> </ul>"},{"location":"reference/lists/#using-ordered-lists","title":"Using ordered lists","text":"<p>Ordered lists must start with a number immediately followed by a dot. The numbers do not need to be consecutive and can be all set to <code>1.</code>, as they will be re-numbered when rendered:</p> List, ordered<pre><code>1.  Vivamus id mi enim. Integer id turpis sapien. Ut condimentum lobortis\n    sagittis. Aliquam purus tellus, faucibus eget urna at, iaculis venenatis\n    nulla. Vivamus a pharetra leo.\n\n    1.  Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet\n        quam enim, eu volutpat urna rutrum a. Nam vehicula nunc mauris, a\n        ultricies libero efficitur sed.\n\n    2.  Morbi eget dapibus felis. Vivamus venenatis porttitor tortor sit amet\n        rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a.\n\n        1.  Mauris dictum mi lacus\n        2.  Ut sit amet placerat ante\n        3.  Suspendisse ac eros arcu\n</code></pre> <ol> <li> <p>Vivamus id mi enim. Integer id turpis sapien. Ut condimentum lobortis     sagittis. Aliquam purus tellus, faucibus eget urna at, iaculis venenatis     nulla. Vivamus a pharetra leo.</p> <ol> <li> <p>Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet     quam enim, eu volutpat urna rutrum a. Nam vehicula nunc mauris, a     ultricies libero efficitur sed.</p> </li> <li> <p>Morbi eget dapibus felis. Vivamus venenatis porttitor tortor sit amet     rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a.</p> <ol> <li>Mauris dictum mi lacus</li> <li>Ut sit amet placerat ante</li> <li>Suspendisse ac eros arcu</li> </ol> </li> </ol> </li> </ol>"},{"location":"reference/lists/#using-definition-lists","title":"Using definition lists","text":"<p>When Definition Lists is enabled, lists of arbitrary key-value pairs, e.g. the parameters of functions or modules, can be enumerated with a simple syntax:</p> Definition list<pre><code>`Lorem ipsum dolor sit amet`\n\n:   Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus\n    tellus non sem sollicitudin, quis rutrum leo facilisis.\n\n`Cras arcu libero`\n\n:   Aliquam metus eros, pretium sed nulla venenatis, faucibus auctor ex. Proin\n    ut eros sed sapien ullamcorper consequat. Nunc ligula ante.\n\n    Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis.\n    Nam vulputate tincidunt fringilla.\n    Nullam dignissim ultrices urna non auctor.\n</code></pre> <code>Lorem ipsum dolor sit amet</code> <p>Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus tellus non sem sollicitudin, quis rutrum leo facilisis.</p> <code>Cras arcu libero</code> <p>Aliquam metus eros, pretium sed nulla venenatis, faucibus auctor ex. Proin ut eros sed sapien ullamcorper consequat. Nunc ligula ante.</p> <p>Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis. Nam vulputate tincidunt fringilla. Nullam dignissim ultrices urna non auctor.</p>"},{"location":"reference/lists/#using-task-lists","title":"Using task lists","text":"<p>When Tasklist is enabled, unordered list items can be prefixed with <code>[ ]</code> to render an unchecked checkbox or <code>[x]</code> to render a checked checkbox, allowing for the definition of task lists:</p> Task list<pre><code>- [x] Lorem ipsum dolor sit amet, consectetur adipiscing elit\n- [ ] Vestibulum convallis sit amet nisi a tincidunt\n    * [x] In hac habitasse platea dictumst\n    * [x] In scelerisque nibh non dolor mollis congue sed et metus\n    * [ ] Praesent sed risus massa\n- [ ] Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque\n</code></pre> <ul> <li> Lorem ipsum dolor sit amet, consectetur adipiscing elit</li> <li> Vestibulum convallis sit amet nisi a tincidunt<ul> <li> In hac habitasse platea dictumst</li> <li> In scelerisque nibh non dolor mollis congue sed et metus</li> <li> Praesent sed risus massa</li> </ul> </li> <li> Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque</li> </ul>"},{"location":"reference/math/","title":"Math","text":"<p>MathJax and KaTeX are two popular libraries for displaying mathematical content in browsers. Although both libraries offer similar functionality, they use different syntaxes and have different configuration options. This documentation site provides information on how to integrate them with Material for MkDocs easily.</p>"},{"location":"reference/math/#configuration","title":"Configuration","text":"<p>The following configuration enables support for rendering block and inline block equations using MathJax and KaTeX.</p>"},{"location":"reference/math/#mathjax","title":"MathJax","text":"<p>MathJax is a powerful and flexible library that supports multiple input formats, such as LaTeX, MathML, AsciiMath, as well as various output formats like HTML, SVG, MathML. To use MathJax within your project, add the following lines to your <code>mkdocs.yml</code>.</p> <code>docs/javascripts/mathjax.js</code> <code>mkdocs.yml</code> <pre><code>window.MathJax = {\n  tex: {\n    inlineMath: [[\"\\\\(\", \"\\\\)\"]],\n    displayMath: [[\"\\\\[\", \"\\\\]\"]],\n    processEscapes: true,\n    processEnvironments: true\n  },\n  options: {\n    ignoreHtmlClass: \".*|\",\n    processHtmlClass: \"arithmatex\"\n  }\n};\n\ndocument$.subscribe(() =&gt; { // (1)!\n  MathJax.startup.output.clearCache()\n  MathJax.typesetClear()\n  MathJax.texReset()\n  MathJax.typesetPromise()\n})\n</code></pre> <ol> <li>This integrates MathJax with instant loading.</li> </ol> <pre><code>markdown_extensions:\n  - pymdownx.arithmatex:\n      generic: true\n\nextra_javascript:\n  - javascripts/mathjax.js\n  - https://unpkg.com/mathjax@3/es5/tex-mml-chtml.js\n</code></pre> <p>See additional configuration options:</p> <ul> <li>Arithmatex</li> </ul>"},{"location":"reference/math/#katex","title":"KaTeX","text":"<p>KaTeX is a lightweight library that focuses on speed and simplicity. It supports a subset of LaTeX syntax and can render math to HTML and SVG. To use KaTeX within your project, add the following lines to your <code>mkdocs.yml</code>.</p> <code>docs/javascripts/katex.js</code> <code>mkdocs.yml</code> <pre><code>document$.subscribe(({ body }) =&gt; { // (1)!\n  renderMathInElement(body, {\n    delimiters: [\n      { left: \"$$\",  right: \"$$\",  display: true },\n      { left: \"$\",   right: \"$\",   display: false },\n      { left: \"\\\\(\", right: \"\\\\)\", display: false },\n      { left: \"\\\\[\", right: \"\\\\]\", display: true }\n    ],\n  })\n})\n</code></pre> <ol> <li>This integrates KaTeX with instant loading.</li> </ol> <pre><code>markdown_extensions:\n  - pymdownx.arithmatex:\n      generic: true\n\nextra_javascript:\n  - javascripts/katex.js\n  - https://unpkg.com/katex@0/dist/katex.min.js\n  - https://unpkg.com/katex@0/dist/contrib/auto-render.min.js\n\nextra_css:\n  - https://unpkg.com/katex@0/dist/katex.min.css\n</code></pre>"},{"location":"reference/math/#usage","title":"Usage","text":""},{"location":"reference/math/#using-block-syntax","title":"Using block syntax","text":"<p>Blocks must be enclosed in <code>$$...$$</code> or <code>\\[...\\]</code> on separate lines:</p> block syntax<pre><code>$$\n\\operatorname{ker} f=\\{g\\in G:f(g)=e_{H}\\}{\\mbox{.}}\n$$\n</code></pre> \\[ \\operatorname{ker} f=\\{g\\in G:f(g)=e_{H}\\}{\\mbox{.}} \\]"},{"location":"reference/math/#using-inline-block-syntax","title":"Using inline block syntax","text":"<p>Inline blocks must be enclosed in <code>$...$</code> or <code>\\(...\\)</code>:</p> inline syntax<pre><code>The homomorphism $f$ is injective if and only if its kernel is only the\nsingleton set $e_G$, because otherwise $\\exists a,b\\in G$ with $a\\neq b$ such\nthat $f(a)=f(b)$.\n</code></pre> <p>The homomorphism \\(f\\) is injective if and only if its kernel is only the singleton set \\(e_G\\), because otherwise \\(\\exists a,b\\in G\\) with \\(a\\neq b\\) such that \\(f(a)=f(b)\\).</p>"},{"location":"reference/math/#comparing-mathjax-and-katex","title":"Comparing MathJax and KaTeX","text":"<p>When deciding between MathJax and KaTeX, there are several key factors to consider:</p> <ul> <li> <p>Speed: KaTeX is generally faster than MathJax. If your site requires   rendering large quantities of complex equations quickly, KaTeX may be the   better choice.</p> </li> <li> <p>Syntax Support: MathJax supports a wider array of LaTeX commands and can   process a variety of mathematical markup languages (like AsciiMath and MathML).   If you need advanced LaTeX features, MathJax may be more suitable.</p> </li> <li> <p>Output Format: Both libraries support HTML and SVG outputs. However,   MathJax also offers MathML output, which can be essential for accessibility,   as it is readable by screen readers.</p> </li> <li> <p>Configurability: MathJax provides a range of configuration options,   allowing for more precise control over its behavior. If you have specific   rendering requirements, MathJax might be a more flexible choice.</p> </li> <li> <p>Browser Support: While both libraries work well in modern browsers,   MathJax has broader compatibility with older browsers. If your audience uses a   variety of browsers, including older ones, MathJax might be a safer option.</p> </li> </ul> <p>In summary, KaTeX shines with its speed and simplicity, whereas MathJax offers more features and better compatibility at the expense of speed. The choice between the two will largely depend on your specific needs and constraints.</p>"},{"location":"reference/tooltips/","title":"Tooltips","text":"<p>Technical documentation often incurs the usage of many acronyms, which may need additional explanation, especially for new user of your project. For these matters, Material for MkDocs uses a combination of Markdown extensions to enable site-wide glossaries.</p>"},{"location":"reference/tooltips/#configuration","title":"Configuration","text":"<p>This configuration enables abbreviations and allows to build a simple project-wide glossary, sourcing definitions from a central location. Add the following line to <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n  - abbr\n  - attr_list\n  - pymdownx.snippets\n</code></pre> <p>See additional configuration options:</p> <ul> <li>Abbreviations</li> <li>Attribute Lists</li> <li>Snippets</li> </ul>"},{"location":"reference/tooltips/#improved-tooltips","title":"Improved tooltips","text":"<p>When improved tooltips are enabled, Material for MkDocs replaces the browser's rendering logic for <code>title</code> attribute with beautiful little tooltips. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>theme:\n  features:\n    - content.tooltips\n</code></pre> <p>Now, tooltips will be rendered for the following elements:</p> <ul> <li>Content \u2013 elements with a <code>title</code>, permalinks and code copy button</li> <li>Header \u2013 home button, header title, color palette switch and repository link</li> <li>Navigation \u2013 links that are shortened with ellipsis, i.e. <code>...</code></li> </ul>"},{"location":"reference/tooltips/#usage","title":"Usage","text":""},{"location":"reference/tooltips/#adding-tooltips","title":"Adding tooltips","text":"<p>The Markdown syntax allows to specify a <code>title</code> for each link, which will render as a beautiful tooltip when improved tooltips are enabled. Add a tooltip to a link with the following lines:</p> Link with tooltip, inline syntax<pre><code>[Hover me](https://example.com \"I'm a tooltip!\")\n</code></pre> <p>Hover me</p> <p>Tooltips can also be added to link references:</p> Link with tooltip, reference syntax<pre><code>[Hover me][example]\n\n  [example]: https://example.com \"I'm a tooltip!\"\n</code></pre> <p>Hover me</p> <p>For all other elements, a <code>title</code> can be added by using the Attribute Lists extension:</p> Icon with tooltip<pre><code>:material-information-outline:{ title=\"Important information\" }\n</code></pre> <p></p>"},{"location":"reference/tooltips/#adding-abbreviations","title":"Adding abbreviations","text":"<p>Abbreviations can be defined by using a special syntax similar to URLs and footnotes, starting with a <code>*</code> and immediately followed by the term or acronym to be associated in square brackets:</p> Text with abbreviations<pre><code>The HTML specification is maintained by the W3C.\n\n*[HTML]: Hyper Text Markup Language\n*[W3C]: World Wide Web Consortium\n</code></pre> <p>The HTML specification is maintained by the W3C.</p>"},{"location":"reference/tooltips/#adding-a-glossary","title":"Adding a glossary","text":"<p>The Snippets extension can be used to implement a simple glossary by moving all abbreviations in a dedicated file<sup>1</sup>, and auto-append this file to all pages with the following configuration:</p> <code>includes/abbreviations.md</code> <code>mkdocs.yml</code> <pre><code>*[HTML]: Hyper Text Markup Language\n*[W3C]: World Wide Web Consortium\n</code></pre> <pre><code>markdown_extensions:\n  - pymdownx.snippets:\n      auto_append:\n        - includes/abbreviations.md\n</code></pre> <p>Tip</p> <p>When using a dedicated file outside of the <code>docs</code> folder, add the parent directory to the list of <code>watch</code> folders so that when the glossary file is updated, the project is automatically reloaded when running <code>mkdocs serve</code>.</p> <pre><code>watch:\n  - includes\n</code></pre> <ol> <li> <p>It's highly recommended to put the Markdown file containing the abbreviations outside of the <code>docs</code> folder (here, a folder with the name <code>includes</code> is used), as MkDocs might otherwise complain about an unreferenced file.\u00a0\u21a9</p> </li> </ol>"},{"location":"blog/archive/2023/","title":"2023","text":""},{"location":"blog/archive/2022/","title":"2022","text":""},{"location":"blog/archive/2021/","title":"2021","text":""},{"location":"blog/category/general/","title":"General","text":""},{"location":"blog/category/build/","title":"Build","text":""},{"location":"blog/category/performance/","title":"Performance","text":""},{"location":"blog/category/blog/","title":"Blog","text":""},{"location":"blog/category/search/","title":"Search","text":""}]}
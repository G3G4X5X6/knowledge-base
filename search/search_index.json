{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stemmer"]},"docs":[{"location":"","title":"Knowledge Base for Cybersecurity","text":"<p>Welcome to my Knowledge Base.</p>"},{"location":"blog/","title":"\u535a\u5ba2","text":""},{"location":"blog/2023/11/30/adding-a-badge-to-your-project/","title":"Adding a  badge to your project","text":"<p>You enjoy working with Material for MkDocs? Share the love! You can now add a badge to your project's README, showing that your project is built with Material for MkDocs.</p> <p>Material for MkDocs' logo was just added to Simple Icons, which is used by Shields.io to include logos in badges. We generated a badge for you, which you can add to your project's README:</p> <p></p>"},{"location":"blog/2023/11/30/adding-a-badge-to-your-project/#usage","title":"Usage","text":"<p>Just copy the following snippet and paste it into your project's <code>README.md</code>:</p> <pre><code>[![Built with Material for MkDocs](https://img.shields.io/badge/Material_for_MkDocs-526CFE?style=for-the-badge&amp;logo=MaterialForMkDocs&amp;logoColor=white)](https://squidfunk.github.io/mkdocs-material/)\n</code></pre>"},{"location":"blog/2022/09/12/blog-support-just-landed/","title":"Blog support just landed","text":"<p>Hey there! You're looking at our new blog, built with the brand new built-in blog plugin. With this plugin, you can easily build a blog alongside your documentation or standalone.</p> <p>Proper support for blogging, as requested by many users over the past few years, was something that was desperately missing from Material for MkDocs' feature set. While everybody agreed that blogging support was a blind spot, it was not obvious whether MkDocs could be extended in a way to allow for blogging as we know it from Jekyll and friends. The built-in blog plugin proves that it is, after all, possible to build a blogging engine on top of MkDocs, in order to create a technical blog alongside your documentation, or as the main thing.</p> <p>This article explains how to build a standalone blog with Material for MkDocs. If you want to build a blog alongside your documentation, please refer to the plugin's documentation.</p>"},{"location":"blog/2022/09/12/blog-support-just-landed/#quick-start","title":"Quick start","text":""},{"location":"blog/2022/09/12/blog-support-just-landed/#creating-a-standalone-blog","title":"Creating a standalone blog","text":"<p>You can bootstrap a new project using the <code>mkdocs</code> executable:</p> <pre><code>mkdocs new .\n</code></pre> <p>This will create the following structure:</p> <pre><code>.\n\u251c\u2500 docs/\n\u2502  \u2514\u2500 index.md\n\u2514\u2500 mkdocs.yml\n</code></pre>"},{"location":"blog/2022/09/12/blog-support-just-landed/#configuration","title":"Configuration","text":"<p>In this article, we're going to build a standalone blog, which means that the blog lives at the root of your project. For this reason, open <code>mkdocs.yml</code>, and replace its contents with:</p> <pre><code>site_name: My Blog\ntheme:\n  name: material\n  features:\n    - navigation.sections\nplugins:\n  - blog:\n      blog_dir: . # (1)!\n  - search\n  - tags\nnav:\n  - index.md\n</code></pre> <ol> <li>This is the important part \u2013 we're hosting the blog at the root of the     project, and not in a subdirectory. For more information, see the     <code>blog_dir</code> configuration option.</li> </ol>"},{"location":"blog/2022/09/12/blog-support-just-landed/#blog-setup","title":"Blog setup","text":"<p>The blog index page lives in <code>docs/index.md</code>. This page was pre-filled by MkDocs with some content, so we're going to replace it with what we need to bootstrap the blog:</p> <pre><code># Blog\n</code></pre> <p>That's it.</p>"},{"location":"blog/2022/09/12/blog-support-just-landed/#writing-your-first-post","title":"Writing your first post","text":"<p>Now that we have set up the built-in blog plugin, we can start writing our first post. All blog posts are written with the exact same Markdown flavor as already included with Material for MkDocs. First, create a folder called <code>posts</code> with a file called <code>hello-world.md</code>:</p> <pre><code>.\n\u251c\u2500 docs/\n\u2502  \u251c\u2500 posts/\n\u2502  \u2502  \u2514\u2500 hello-world.md # (1)!\n\u2502  \u2514\u2500 index.md\n\u2514\u2500 mkdocs.yml\n</code></pre> <ol> <li>If you'd like to arrange posts differently, you're free to do so. The URLs     are built from the format specified in <code>post_url_format</code> and     the titles and dates of posts, no matter how they are organized     inside the <code>posts</code> directory.</li> </ol> <p>Then, open up <code>hello-world.md</code>, and add the following lines:</p> <pre><code>---\ndraft: true # (1)!\ndate: 2022-01-31\ncategories:\n  - Hello\n  - World\n---\n\n# Hello world!\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque nec\nmaximus ex. Sed consequat, nulla quis malesuada dapibus, elit metus vehicula\nerat, ut egestas tellus eros at risus. In hac habitasse platea dictumst.\nPhasellus id lacus pulvinar erat consequat pretium. Morbi malesuada arcu mauris\nNam vel justo sem. Nam placerat purus non varius luctus. Integer pretium leo in\nsem rhoncus, quis gravida orci mollis. Proin id aliquam est. Vivamus in nunc ac\nmetus tristique pellentesque. Suspendisse viverra urna in accumsan aliquet.\n\n&lt;!-- more --&gt;\n\nDonec volutpat, elit ac volutpat laoreet, turpis dolor semper nibh, et dictum\nmassa ex pulvinar elit. Curabitur commodo sit amet dolor sed mattis. Etiam\ntempor odio eu nisi gravida cursus. Maecenas ante enim, fermentum sit amet\nmolestie nec, mollis ac libero. Vivamus sagittis suscipit eros ut luctus.\n\nNunc vehicula sagittis condimentum. Cras facilisis bibendum lorem et feugiat.\nIn auctor accumsan ligula, at consectetur erat commodo quis. Morbi ac nunc\npharetra, pellentesque risus in, consectetur urna. Nulla id enim facilisis\narcu tincidunt pulvinar. Vestibulum laoreet risus scelerisque porta congue.\nIn velit purus, dictum quis neque nec, molestie viverra risus. Nam pellentesque\ntellus id elit ultricies, vel finibus erat cursus.\n</code></pre> <ol> <li>If you mark a post as a draft, a red marker appears next to the post date     on index pages. When the site is built, drafts are not included in the     output. This behavior can be changed, e.g. for rendering drafts when     building deploy previews.</li> </ol> <p>When you spin up the live preview server, you should be greeted by your first post! You'll also realize, that archive and category indexes have been automatically generated for you:</p> <p></p> <p>However, this is just the start. The built-in blog plugin packs a lot of functionality needed in day-to-day blogging. Visit the documentation of the plugin to learn about the following topics:</p> <ul> <li>Adding an excerpt</li> <li>Adding authors</li> <li>Adding categories</li> <li>Adding tags</li> <li>Adding related links</li> <li>Linking from and to posts</li> <li>Setting the reading time</li> <li>Setting defaults</li> </ul> <p>Additionally, the built-in blog plugin has dozens of configuration options which allow for fine-tuning the output. You can configure post slugs, general behavior and much more.</p>"},{"location":"blog/2022/09/12/blog-support-just-landed/#whats-next","title":"What's next?","text":"<p>Getting basic blogging support out the door was quite a challenge \u2013 the built-in blog plugin is probably the biggest release this year and already packs a lot of functionality. However, Material for MkDocs is used in many different contexts, which is why we'd expect to iterate, as always.</p> <p>Some ideas already proposed by users:</p> <ul> <li> <p>Blog series: Authors should be able to create so called blog series and   assign posts to a blog series using simple identifiers. For each post that is   part of a series, a list with links to all other posts should be included in   the post's content.</p> </li> <li> <p>Author indexes: Besides archive and category indexes, authors should   be able to create per-author indexes, which list all posts linked to an   author. Additionally, a profile should be created for each author and linked   from posts.</p> </li> <li> <p>Social share buttons: It should be easy to share blog posts via social   media or other ways. For this reason, it should be possible to automatically   include social sharing buttons with each post.</p> </li> </ul> <p>What's still missing from the brand new built-in blog plugin? Feel free to share your ideas in the comments. Together, we can build one of the best modern engines for technical blogging!</p>"},{"location":"blog/2022/05/05/chinese-search-support/","title":"Chinese search support \u2013 \u4e2d\u6587\u641c\u7d22\u200b\u652f\u6301","text":"<p>Insiders adds experimental Chinese language support for the built-in search plugin \u2013 a feature that has been requested for a long time given the large number of Chinese users.</p> <p>After the United States and Germany, the third-largest country of origin of Material for MkDocs users is China. For a long time, the built-in search plugin didn't allow for proper segmentation of Chinese characters, mainly due to missing support in lunr-languages which is used for search tokenization and stemming. The latest Insiders release adds long-awaited Chinese language support for the built-in search plugin, something that has been requested by many users.</p> <p>Material for MkDocs\u7d42\u65bc\u200b\u652f\u6301\u200b\u4e2d\u6587\u200b\u4e86\uff01\u6587\u672c\u200b\u88ab\u200b\u6b63\u78ba\u200b\u5206\u5272\u200b\u4e26\u4e14\u200b\u66f4\u200b\u5bb9\u6613\u200b\u627e\u5230\u3002</p> <p>This article explains how to set up Chinese language support for the built-in search plugin in a few minutes.</p>"},{"location":"blog/2022/05/05/chinese-search-support/#configuration","title":"Configuration","text":"<p>Chinese language support for Material for MkDocs is provided by jieba, an excellent Chinese text segmentation library. If jieba is installed, the built-in search plugin automatically detects Chinese characters and runs them through the segmenter. You can install jieba with:</p> <pre><code>pip install jieba\n</code></pre> <p>The next step is only required if you specified the <code>separator</code> configuration in <code>mkdocs.yml</code>. Text is segmented with zero-width whitespace characters, so it renders exactly the same in the search modal. Adjust <code>mkdocs.yml</code> so that the <code>separator</code> includes the <code>\\u200b</code> character:</p> <pre><code>plugins:\n  - search:\n      separator: '[\\s\\u200b\\-]'\n</code></pre> <p>That's all that is necessary.</p>"},{"location":"blog/2022/05/05/chinese-search-support/#usage","title":"Usage","text":"<p>If you followed the instructions in the configuration guide, Chinese words will now be tokenized using jieba. Try searching for  \u652f\u6301 to see how it integrates with the built-in search plugin.</p> <p>Note that this is an experimental feature, and I, @squidfunk, am not proficient in Chinese (yet?). If you find a bug or think something can be improved, please open an issue.</p>"},{"location":"blog/2021/09/26/excluding-content-from-search/","title":"Excluding content from search","text":"<p>The latest Insiders release brings three new simple ways to exclude dedicated parts of a document from the search index, allowing for more fine-grained control.</p> <p>Two weeks ago, Material for MkDocs Insiders shipped a brand new search plugin, yielding massive improvements in usability, but also in speed and size of the search index. Interestingly, as discussed in the previous blog article, we only scratched the surface of what's now possible. This release brings some useful features that enhance the writing experience, allowing for more fine-grained control of what pages, sections and blocks of a Markdown file should be indexed by the built-in search functionality.</p> <p>The following section discusses existing solutions for excluding pages and sections from the search index. If you immediately want to learn what's new, skip to the section just after that.</p>"},{"location":"blog/2021/09/26/excluding-content-from-search/#prior-art","title":"Prior art","text":"<p>MkDocs has a rich and thriving ecosystem of plugins, and it comes as no surprise that there's already a fantastic plugin by @chrieke to exclude specific sections of a Markdown file \u2013 the mkdocs-exclude-search plugin. It can be installed with:</p> <pre><code>pip install mkdocs-exclude-search\n</code></pre> <p>How it works: the plugin post-processes the <code>search_index.json</code> file that is generated by the built-in search plugin, giving the author the ability to exclude certain pages and sections by adding a few lines of configuration to <code>mkdocs.yml</code>. An example:</p> <pre><code>plugins:\n  - search\n  - exclude-search:\n      exclude:\n        - page.md\n        - page.md#section\n        - directory/*\n        - /*/page.md\n</code></pre> <p>It's easy to see that the plugin follows a configuration-centric approach, which adds support for advanced filtering techniques like infix- and suffix-filtering using wildcards. While this is a very powerful idea, it comes with some downsides:</p> <ol> <li> <p>Exclusion patterns and content are not co-located: exclusion patterns     need to be defined in <code>mkdocs.yml</code>, and not as part of the respective     document or section to be excluded. This might result in stale exclusion     patterns, leading to unintended behavior:</p> <ul> <li> <p>When a headline is changed, its slug (permalink) also changes, which might   suddenly match (or unmatch) a pattern, e.g., when an author fixes a typo   in a headline.</p> </li> <li> <p>As exclusion patterns support the use of wildcards, different authors   might overwrite each other's patterns without any immediate feedback since   the plugin does only report the number of excluded documents \u2013 not what   has been excluded.<sup>1</sup></p> </li> </ul> </li> <li> <p>Exclusion control might be too coarse: The mkdocs-exclude-search     plugin only allows for the exclusion of pages and sections. It's not     possible to exclude parts of a section, e.g., content that is irrelevant     to search but must be included as part of the documentation.</p> </li> </ol>"},{"location":"blog/2021/09/26/excluding-content-from-search/#whats-new","title":"What's new?","text":"<p>The latest Insiders release brings fine-grained control for excluding pages, sections, and blocks from the search index, implemented through front matter, as well as the Attribute Lists. Note that it doesn't replace the mkdocs-exclude-search plugin but complements it.</p>"},{"location":"blog/2021/09/26/excluding-content-from-search/#excluding-pages","title":"Excluding pages","text":"<p>An entire page can be excluded from the search index by adding a simple directive to the front matter of the respective Markdown file. The good thing is that the author now only has to check the top of the document to learn whether it is excluded or not:</p> <pre><code>---\nsearch:\n  exclude: true\n---\n\n# Page title\n...\n</code></pre>"},{"location":"blog/2021/09/26/excluding-content-from-search/#excluding-sections","title":"Excluding sections","text":"<p>If a section should be excluded, the author can use the Attribute Lists extension to add a pragma called <code>data-search-exclude</code> at the end of a heading. The pragma is not included in the final HTML, as search pragmas are filtered by the search plugin before the page is rendered:</p> <code>docs/page.md</code> <code>search_index.json</code> <pre><code># Page title\n\n## Section 1\n\nThe content of this section is included\n\n## Section 2 { data-search-exclude }\n\nThe content of this section is excluded\n</code></pre> <pre><code>{\n  ...\n  \"docs\": [\n    {\n      \"location\":\"page/\",\n      \"text\":\"\",\n      \"title\":\"Document title\"\n    },\n    {\n      \"location\":\"page/#section-1\",\n      \"text\":\"&lt;p&gt;The content of this section is included&lt;/p&gt;\",\n      \"title\":\"Section 1\"\n    }\n  ]\n}\n</code></pre>"},{"location":"blog/2021/09/26/excluding-content-from-search/#excluding-blocks","title":"Excluding blocks","text":"<p>If even more fine-grained control is desired, the pragma can be added to any block-level element or inline-level element that is officially supported by the Attribute Lists extension:</p> <code>docs/page.md</code> <code>search_index.json</code> <pre><code># Page title\n\nThe content of this block is included\n\nThe content of this block is excluded\n{ data-search-exclude }\n</code></pre> <pre><code>{\n  ...\n  \"docs\": [\n    {\n      \"location\":\"page/\",\n      \"text\":\"&lt;p&gt;The content of this block is included&lt;/p&gt;\",\n      \"title\":\"Document title\"\n    },\n  ]\n}\n</code></pre>"},{"location":"blog/2021/09/26/excluding-content-from-search/#conclusion","title":"Conclusion","text":"<p>The latest release brings three simple ways to control more precisely what goes into the search index and what doesn't. It complements the already very powerful mkdocs-exclude-search plugin, allowing for new methods of shaping the structure, size and content of the search index.</p> <ol> <li> <p>When the log level is set to <code>DEBUG</code>, the plugin will report exactly which pages and sections have been excluded from the search index, but MkDocs will now flood the terminal with debug output from its core and other plugins.\u00a0\u21a9</p> </li> </ol>"},{"location":"blog/2023/09/22/using-git-sparse-checkout-for-faster-documentation-builds/","title":"Using <code>git sparse-checkout</code> for faster documentation builds","text":"<p>Leveraging <code>git sparse-checkout</code> in GitHub Actions enabled us to speed up documentation builds in our repository, cutting checkout times from 20 to 30 seconds to just 2 seconds.</p> <p>Developing an efficient approach to build documentation in CI workflows is essential, especially when working in large repositories with thousands of commits, like ours. Of course, we want to build documentation quickly and efficiently, ensuring fast and productive workflows. When using both the wonderful <code>git-committers</code> and <code>git-revision-date-localized</code> plugins to display document contributors and dates at the bottom of each page, we are required to set <code>fetch-depth: 0</code>, which resulted in checkout times of 20 to 30 seconds on our repository. By leveraging <code>git sparse-checkout</code> within GitHub Actions, check out time was brought down to 2 seconds.</p>"},{"location":"blog/2023/09/22/using-git-sparse-checkout-for-faster-documentation-builds/#a-primer","title":"A Primer","text":"<p><code>git sparse-checkout</code> allows you to check out only a subset of the files in a repository, making it incredibly useful for large repositories where a full checkout takes long and includes many files that are not relevant when building documentation.</p>"},{"location":"blog/2023/09/22/using-git-sparse-checkout-for-faster-documentation-builds/#github-actions","title":"GitHub Actions","text":"<p>To enable <code>git sparse-checkout</code> within GitHub Actions and ensure that you are only building the documentation that you need, add the following lines to your workflow file:</p> <pre><code>- uses: actions/checkout@v4\n  with:\n    fetch-depth: 0\n    sparse-checkout: |\n      docs\n      includes\n</code></pre> <p><code>git sparse-checkout</code> always checks out all files residing in the repository\u2019s root. This means that regardless of the specified paths or directories for sparse checkout, the files located in the root of the repository will always be included in the checkout process.</p> <p>Thus, you only need to specify the directories that are necessary for building documentation. In our case, we only need the <code>docs</code> and <code>includes</code> folders, but if you need additional directories, you can just add them to the end of the list. A complete example workflow for GitHub Actions:</p> <pre><code>name: documentation\non:\n  push:\n    branches:\n      - master\n      - main\npermissions:\n  contents: write\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n          sparse-checkout: |\n            docs\n            includes\n      - uses: actions/setup-python@v4\n        with:\n          python-version: 3.x\n      - run: pip install mkdocs-material\n      - run: mkdocs gh-deploy --force\n</code></pre>"},{"location":"blog/2023/09/22/using-git-sparse-checkout-for-faster-documentation-builds/#conclusion","title":"Conclusion","text":"<p>That's all there is! We're super happy with the results and hope that this will help you to speed up your documentation builds in GitHub Actions as well. As always, feel free to share your thoughts and experiences in the comments below.</p>"},{"location":"blog/2021/09/13/search-better-faster-smaller/","title":"Search: better, faster, smaller","text":"<p>This is the story of how we managed to completely rebuild client-side search, delivering a significantly better user experience while making it faster and smaller at the same time.</p> <p>The search of Material for MkDocs is by far one of its best and most-loved assets: multilingual, offline-capable, and most importantly: all client-side. It provides a solution to empower the users of your documentation to find what they're searching for instantly without the headache of managing additional servers. However, even though several iterations have been made, there's still some room for improvement, which is why we rebuilt the search plugin and integration from the ground up. This article shines some light on the internals of the new search, why it's much more powerful than the previous version, and what's about to come.</p> <p>The next section discusses the architecture and issues of the current search implementation. If you immediately want to learn what's new, skip to the section just after that.</p>"},{"location":"blog/2021/09/13/search-better-faster-smaller/#architecture","title":"Architecture","text":"<p>Material for MkDocs uses lunr together with lunr-languages to implement its client-side search capabilities. When a documentation page is loaded and JavaScript is available, the search index as generated by the built-in search plugin during the build process is requested from the server:</p> <pre><code>const index$ = document.forms.namedItem(\"search\")\n  ? __search?.index || requestJSON&lt;SearchIndex&gt;(\n    new URL(\"search/search_index.json\", config.base)\n  )\n  : NEVER\n</code></pre>"},{"location":"blog/2021/09/13/search-better-faster-smaller/#search-index","title":"Search index","text":"<p>The search index includes a stripped-down version of all pages. Let's take a look at an example to understand precisely what the search index contains from the original Markdown file:</p> Expand to inspect example <code>docs/page.md</code> <code>search_index.json</code> <pre><code># Example\n\n## Text\n\nIt's very easy to make some words **bold** and other words *italic*\nwith Markdown. You can even add [links](#), or even `code`:\n\n```\nif (isAwesome) {\n  return true\n}\n```\n\n## Lists\n\nSometimes you want numbered lists:\n\n1. One\n2. Two\n3. Three\n\nSometimes you want bullet points:\n\n* Start a line with a star\n* Profit!\n</code></pre> <pre><code>{\n  \"config\": {\n    \"indexing\": \"full\",\n    \"lang\": [\n      \"en\"\n    ],\n    \"min_search_length\": 3,\n    \"prebuild_index\": false,\n    \"separator\": \"[\\\\s\\\\-]+\"\n  },\n  \"docs\": [\n    {\n      \"location\": \"page/\",\n      \"title\": \"Example\",\n      \"text\": \"Example Text It's very easy to make some words bold and other words italic with Markdown. You can even add links , or even code : if (isAwesome) { return true } Lists Sometimes you want numbered lists: One Two Three Sometimes you want bullet points: Start a line with a star Profit!\"\n    },\n    {\n      \"location\": \"page/#example\",\n      \"title\": \"Example\",\n      \"text\": \"\"\n    },\n    {\n      \"location\": \"page/#text\",\n      \"title\": \"Text\",\n      \"text\": \"It's very easy to make some words bold and other words italic with Markdown. You can even add links , or even code : if (isAwesome) { return true }\"\n    },\n    {\n      \"location\": \"page/#lists\",\n      \"title\": \"Lists\",\n      \"text\": \"Sometimes you want numbered lists: One Two Three Sometimes you want bullet points: Start a line with a star Profit!\"\n    }\n  ]\n}\n</code></pre> <p>If we inspect the search index, we immediately see several problems:</p> <ol> <li> <p>All content is included twice: the search index contains one entry       with the entire contents of the page, and one entry for each section of       the page, i.e., each block preceded by a headline or subheadline. This       significantly contributes to the size of the search index.</p> </li> <li> <p>All structure is lost: when the search index is built, all structural       information like HTML tags and attributes are stripped from the content.       While this approach works well for paragraphs and inline formatting, it       might be problematic for lists and code blocks. An excerpt:</p> <pre><code>\u2026 links , or even code : if (isAwesome) { \u2026 } Lists Sometimes you want \u2026\n</code></pre> <ul> <li> <p>Context: for an untrained eye, the result can look like gibberish, as   it's not immediately apparent what classifies as text and what as code.   Furthermore, it's not clear that <code>Lists</code> is a headline as it's merged   with the code block before and the paragraph after it.</p> </li> <li> <p>Punctuation: inline elements like links that are immediately followed   by punctuation are separated by whitespace (see <code>,</code> and <code>:</code> in the   excerpt). This is because all extracted text is joined with a whitespace   character during the construction of the search index.</p> </li> </ul> </li> </ol> <p>It's not difficult to see that it can be quite challenging to implement a good search experience for theme authors, which is why Material for MkDocs (up to now) did some monkey patching to be able to render slightly more meaningful search previews.</p>"},{"location":"blog/2021/09/13/search-better-faster-smaller/#search-worker","title":"Search worker","text":"<p>The actual search functionality is implemented as part of a web worker<sup>1</sup>, which creates and manages the lunr search index. When search is initialized, the following steps are taken:</p> <ol> <li> <p>Linking sections with pages: The search index is parsed, and each     section is linked to its parent page. The parent page itself is not     indexed, as it would lead to duplicate results, so only the sections     remain. Linking is necessary, as search results are grouped by page.</p> </li> <li> <p>Tokenization: The <code>title</code> and <code>text</code> values of each section are split     into tokens by using the <code>separator</code> as configured in     <code>mkdocs.yml</code>. Tokenization itself is carried out by     lunr's default tokenizer, which doesn't allow for     lookahead or separators spanning multiple characters.</p> <p>Why is this important and a big deal? We will see later how much more we can achieve with a tokenizer that is capable of separating strings with lookahead.</p> </li> <li> <p>Indexing: As a final step, each section is indexed. When querying the     index, if a search query includes one of the tokens as returned by step 2.,     the section is considered to be part of the search result and passed to the     main thread.</p> </li> </ol> <p>Now, that's basically how the search worker operates. Sure, there's a little more magic involved, e.g., search results are post-processed and rescored to account for some shortcomings of lunr, but in general, this is how data gets into and out of the index.</p>"},{"location":"blog/2021/09/13/search-better-faster-smaller/#search-previews","title":"Search previews","text":"<p>Users should be able to quickly scan and evaluate the relevance of a search result in the given context, which is why a concise summary with highlighted occurrences of the search terms found is an essential part of a great search experience.</p> <p>This is where the current search preview generation falls short, as some of the search previews appear not to include any occurrence of any of the search terms. This was due to the fact that search previews were truncated after a maximum of 320 characters, as can be seen here:</p> <p></p> <p>The first two results look like they're not relevant, as they don't seem to include the query string the user just searched for. Yet, they are.</p> <p>A better solution to this problem has been on the roadmap for a very, very long time, but in order to solve this once and for all, several factors need to be carefully considered:</p> <ol> <li> <p>Word boundaries: some themes<sup>2</sup> for static site generators generate    search previews by expanding the text left and right next to an occurrence,    stopping at a whitespace character when enough words have been consumed. A    preview might look like this:</p> <pre><code>\u2026 channels, e.g., or which can be configured via mkdocs.yml \u2026\n</code></pre> <p>While this may work for languages that use whitespace as a separator between words, it breaks down for languages like Japanese or Chinese<sup>3</sup>, as they have non-whitespace word boundaries and use dedicated segmenters to split strings into tokens.</p> </li> <li> <p>Context-awareness: Although whitespace doesn't work for all languages,     one could argue that it could be a good enough solution. Unfortunately, this     is not necessarily true for code blocks, as the removal of whitespace might     change meaning in some languages.</p> </li> <li> <p>Structure: Preserving structural information is not a must, but     apparently beneficial to build more meaningful search previews which allow     for a quick evaluation of relevance. If a word occurrence is part of a code     block, it should be rendered as a code block.</p> </li> </ol>"},{"location":"blog/2021/09/13/search-better-faster-smaller/#whats-new","title":"What's new?","text":"<p>After we built a solid understanding of the problem space and before we dive into the internals of our new search implementation to see which of the problems it already solves, a quick overview of what features and improvements it brings:</p> <ul> <li>Better: support for rich search previews, preserving the structural   information of code blocks, inline code, and lists, so they are rendered   as-is, as well as lookahead tokenization, more accurate highlighting, and   improved stability of typeahead. Also, a slightly better UX.</li> <li>Faster and smaller: significant decrease in search index size of up   to 48% due to improved extraction and construction techniques, resulting in a   search experience that is up to 95% faster, which is particularly helpful for   large documentation projects.</li> </ul>"},{"location":"blog/2021/09/13/search-better-faster-smaller/#rich-search-previews","title":"Rich search previews","text":"<p>As we rebuilt the search plugin from scratch, we reworked the construction of the search index to preserve the structural information of code blocks, inline code, as well as unordered and ordered lists. Using the example from the search index section, here's how it looks:</p> NowBefore <p></p> <p></p> <p>Now, code blocks are first-class citizens of search previews, and even inline code formatting is preserved. Let's take a look at the new structure of the search index to understand why:</p> Expand to inspect search index NowBefore <pre><code>{\n  ...\n  \"docs\": [\n    {\n      \"location\": \"page/\",\n      \"title\": \"Example\",\n      \"text\": \"\"\n    },\n    {\n      \"location\": \"page/#text\",\n      \"title\": \"Text\",\n      \"text\": \"&lt;p&gt;It's very easy to make some words bold and other words italic with Markdown. You can even add links, or even &lt;code&gt;code&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;if (isAwesome){\\n  return true\\n}\\n&lt;/code&gt;&lt;/pre&gt;\"\n    },\n    {\n      \"location\": \"page/#lists\",\n      \"title\": \"Lists\",\n      \"text\": \"&lt;p&gt;Sometimes you want numbered lists:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;One&lt;/li&gt; &lt;li&gt;Two&lt;/li&gt; &lt;li&gt;Three&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;Sometimes you want bullet points:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Start a line with a star&lt;/li&gt; &lt;li&gt;Profit!&lt;/li&gt; &lt;/ul&gt;\"\n    }\n  ]\n}\n</code></pre> <pre><code>{\n  ...\n  \"docs\": [\n    {\n      \"location\": \"page/\",\n      \"title\": \"Example\",\n      \"text\": \"Example Text It's very easy to make some words bold and other words italic with Markdown. You can even add links , or even code : if (isAwesome) { return true } Lists Sometimes you want numbered lists: One Two Three Sometimes you want bullet points: Start a line with a star Profit!\"\n    },\n    {\n      \"location\": \"page/#example\",\n      \"title\": \"Example\",\n      \"text\": \"\"\n    },\n    {\n      \"location\": \"page/#text\",\n      \"title\": \"Text\",\n      \"text\": \"It's very easy to make some words bold and other words italic with Markdown. You can even add links , or even code : if (isAwesome) { return true }\"\n    },\n    {\n      \"location\": \"page/#lists\",\n      \"title\": \"Lists\",\n      \"text\": \"Sometimes you want numbered lists: One Two Three Sometimes you want bullet points: Start a line with a star Profit!\"\n    }\n  ]\n}\n</code></pre> <p>If we inspect the search index again, we can see how the situation improved:</p> <ol> <li> <p>Content is included only once: the search index does not include the     content of the page twice, as only the sections of a page are part of the     search index. This leads to a significant reduction in size, fewer bytes to     transfer, and a smaller search index.</p> </li> <li> <p>Some structure is preserved: each section of the search index includes     a small subset of HTML to provide the necessary structure to allow for more     sophisticated search previews. Revisiting our example from before, let's     look at an excerpt:</p> NowBefore <pre><code>\u2026 links, or even &lt;code&gt;code&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;if (isAwesome){ \u2026 }\\n&lt;/code&gt;&lt;/pre&gt;\n</code></pre> <pre><code>\u2026 links , or even code : if (isAwesome) { \u2026 }\n</code></pre> <p>The punctuation issue is gone, as no additional whitespace is inserted, and the preserved markup yields additional context to make scanning search results more effective.</p> </li> </ol> <p>On to the next step in the process: tokenization.</p>"},{"location":"blog/2021/09/13/search-better-faster-smaller/#tokenizer-lookahead","title":"Tokenizer lookahead","text":"<p>The default tokenizer of lunr uses a regular expression to split a given string by matching each character against the <code>separator</code> as defined in <code>mkdocs.yml</code>. This doesn't allow for more complex separators based on lookahead or multiple characters.</p> <p>Fortunately, our new search implementation provides an advanced tokenizer that doesn't have these shortcomings and supports more complex regular expressions. As a result, Material for MkDocs just changed its own separator configuration to the following value:</p> <pre><code>[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&amp;[lg]t;\n</code></pre> <p>While the first part up to the first <code>|</code> contains a list of single control characters at which the string should be split, the following three sections explain the remainder of the regular expression.<sup>4</sup></p>"},{"location":"blog/2021/09/13/search-better-faster-smaller/#case-changes","title":"Case changes","text":"<p>Many programming languages use <code>PascalCase</code> or <code>camelCase</code> naming conventions. When a user searches for the term <code>case</code>, it's quite natural to expect for <code>PascalCase</code> and <code>camelCase</code> to show up. By adding the following match group to the separator, this can now be achieved with ease:</p> <pre><code>(?!\\b)(?=[A-Z][a-z])\n</code></pre> <p>This regular expression is a combination of a negative lookahead (<code>\\b</code>, i.e., not a word boundary) and a positive lookahead (<code>[A-Z][a-z]</code>, i.e., an uppercase character followed by a lowercase character), and has the following behavior:</p> <ul> <li><code>PascalCase</code> <code>Pascal</code>, <code>Case</code></li> <li><code>camelCase</code> <code>camel</code>, <code>Case</code></li> <li><code>UPPERCASE</code> <code>UPPERCASE</code></li> </ul> <p>Searching for  searchHighlight now brings up the section discussing the <code>search.highlight</code> feature flag, which also demonstrates that this now even works properly for search queries.<sup>5</sup></p>"},{"location":"blog/2021/09/13/search-better-faster-smaller/#version-numbers","title":"Version numbers","text":"<p>Indexing version numbers is another problem that can be solved with a small lookahead. Usually, <code>.</code> should be considered a separator to split words like <code>search.highlight</code>. However, splitting version numbers at <code>.</code> will make them undiscoverable. Thus, the following expression:</p> <pre><code>\\.(?!\\d)\n</code></pre> <p>This regular expression matches a <code>.</code> only if not immediately followed by a digit <code>\\d</code>, which leaves version numbers discoverable. Searching for  7.2.6 brings up the 7.2.6 release notes.</p>"},{"location":"blog/2021/09/13/search-better-faster-smaller/#htmlxml-tags","title":"HTML/XML tags","text":"<p>If your documentation includes HTML/XML code examples, you may want to allow users to find specific tag names. Unfortunately, the <code>&lt;</code> and <code>&gt;</code> control characters are encoded in code blocks as <code>&amp;lt;</code> and <code>&amp;gt;</code>. Now, adding the following expression to the separator allows for just that:</p> <pre><code>&amp;[lg]t;\n</code></pre> <p>We've only just begun to scratch the surface of the new possibilities tokenizer lookahead brings. If you found other useful expressions, you're invited to share them in the comment section.</p>"},{"location":"blog/2021/09/13/search-better-faster-smaller/#accurate-highlighting","title":"Accurate highlighting","text":"<p>Highlighting is the last step in the process of search and involves the highlighting of all search term occurrences in a given search result. For a long time, highlighting was implemented through dynamically generated regular expressions.<sup>6</sup></p> <p>This approach has some problems with non-whitespace languages like Japanese or Chinese<sup>3</sup> since it only works if the highlighted term is at a word boundary. However, Asian languages are tokenized using a dedicated segmenter, which cannot be modeled with regular expressions.</p> <p>Now, as a direct result of the new tokenization approach, our new search implementation uses token positions for highlighting, making it exactly as powerful as tokenization:</p> <ol> <li> <p>Word boundaries: as the new highlighter uses token positions, word     boundaries are equal to token boundaries. This means that more complex cases     of tokenization (e.g., case changes, version numbers, HTML/XML tags),     are now all highlighted accurately.</p> </li> <li> <p>Context-awareness: as the new search index preserves some of the     structural information of the original document, the content of a section     is now divided into separate content blocks \u2013 paragraphs, code blocks, and     lists.</p> <p>Now, only the content blocks that actually contain occurrences of one of the search terms are considered for inclusion into the search preview. If a term only occurs in a code block, it's the code block that gets rendered, see, for example, the results of  twitter.</p> </li> </ol>"},{"location":"blog/2021/09/13/search-better-faster-smaller/#benchmarks","title":"Benchmarks","text":"<p>We conducted two benchmarks \u2013 one with the documentation of Material for MkDocs itself, and one with a very massive corpus of Markdown files with more than 800,000 words \u2013 a size most documentation projects will likely never reach:</p> Before Now Relative Material for MkDocs Index size 573 kB 335 kB \u201342% Index size (<code>gzip</code>) 105 kB 78 kB \u201327% Indexing time<sup>7</sup> 265 ms 177 ms \u201334% KJV Markdown<sup>8</sup> Index size 8.2 MB 4.4 MB \u201347% Index size (<code>gzip</code>) 2.3 MB 1.2 MB \u201348% Indexing time 2,700 ms 1,390 ms \u201348% <p>Benchmark results</p> <p>The results show that indexing time, which is the time that it takes to set up the search when the page is loaded, has dropped by up to 48%, which means the new search is up to 95% faster. This is a significant improvement, particularly relevant for large documentation projects.</p> <p>While 1,3s still may sound like a long time, using the new client-side search together with instant loading only creates the search index on the initial page load. When navigating, the search index is preserved across pages, so the cost does only have to be paid once.</p>"},{"location":"blog/2021/09/13/search-better-faster-smaller/#user-interface","title":"User interface","text":"<p>Additionally, some small improvements have been made, most prominently the more results on this page button, which now sticks to the top of the search result list when open. This enables the user to jump out of the list more quickly.</p>"},{"location":"blog/2021/09/13/search-better-faster-smaller/#whats-next","title":"What's next?","text":"<p>Our new search implementation is a big improvement to Material for MkDocs. It solves some long-standing issues which needed to be tackled for years. Yet, it's only the start of a search experience that is going to get better and better. Next up:</p> <ul> <li> <p>Context-aware search summarization: currently, the first two matching   content blocks are rendered as a search preview. With the new tokenization   technique, we laid the groundwork for more sophisticated shortening and   summarization methods, which we're tackling next.</p> </li> <li> <p>User interface improvements: as we now gained full control over the   search plugin, we can now add meaningful metadata to provide more context and   a better experience. We'll explore some of those paths in the future.</p> </li> </ul> <p>If you've made it this far, thank you for your time and interest in Material for MkDocs! This is the first blog article that I decided to write after a short Twitter survey made me to. You're invited to leave a comment to share your experiences with the new search implementation.</p> <ol> <li> <p>Prior to , search was carried out in the main thread  which locked up the browser, rendering it unusable. This problem was first reported in #904 and, after some back and forth, fixed and released in .\u00a0\u21a9</p> </li> <li> <p>At the time of writing, Just the Docs and Docusaurus use this method for generating search previews. Note that the latter also integrates with Algolia, which is a fully managed server-based solution.\u00a0\u21a9</p> </li> <li> <p>China and Japan are both within the top 5 countries of origin of users of Material for MkDocs.\u00a0\u21a9\u21a9</p> </li> <li> <p>As a fun fact: the <code>separator</code> default value of the search plugin being <code>[\\s\\-]+</code> always has been kind of irritating, as it suggests that multiple characters can be considered being a separator. However, the <code>+</code> is completely irrelevant, as regular expression groups involving multiple characters were never supported by lunr's default tokenizer.\u00a0\u21a9</p> </li> <li> <p>Previously, the search query was not correctly tokenized due to the way lunr treats wildcards, as it disables the pipeline for search terms that contain wildcards. In order to provide a good typeahead experience, Material for MkDocs adds wildcards to the end of each search term not explicitly preceded with <code>+</code> or <code>-</code>, effectively disabling tokenization.\u00a0\u21a9</p> </li> <li> <p>Using the separator as defined in <code>mkdocs.yml</code>, a regular expression was constructed that was trying to mimic the tokenizer. As an example, the search query <code>search highlight</code> was transformed into the rather cumbersome regular expression <code>(^|&lt;separator&gt;)(search|highlight)</code>, which only matches at word boundaries.\u00a0\u21a9</p> </li> <li> <p>Smallest value of ten distinct runs.\u00a0\u21a9</p> </li> <li> <p>We agnostically use KJV Markdown as a tool for testing to learn how Material for MkDocs behaves on large corpora, as it's a very large set of Markdown files with over 800k words.\u00a0\u21a9</p> </li> </ol>"},{"location":"blog/2023/10/02/sunsetting-gitter-towards-efficient-community-engagement/","title":"Sunsetting Gitter: Towards Efficient Community Engagement","text":"<p>As we're starting to build a team around Material for MkDocs, we've decided to sunset and archive our Gitter channel on October 13, 2023 in favor of GitHub Discussions.</p> <p>As part of our efforts to improve the processes for maintaining Material for MkDocs and for supporting the community, we have reviewed the use of different communication channels. At the moment, both Gitter and GitHub Discussions allow to ask the community for support and to discuss ideas and issues. In the past weeks, we have begun to question whether this duplication is in the best interest of our project. This post explains the rationale behind our decision.</p>"},{"location":"blog/2023/10/02/sunsetting-gitter-towards-efficient-community-engagement/#the-constraints-of-gitter","title":"The Constraints of Gitter","text":"<p>In the first years of Material for MkDocs, Gitter served as a helpful platform for quick community interactions and questions. However, there are some inherent constraints that necessitated a shift. Here's a breakdown of the challenges we encountered:</p> <ol> <li> <p>Thread utilization \u2013    Even with the introduction of threads, many Gitter users were reticent to    use them, leading to cluttered and disconnected conversations, making it     difficult to follow.</p> </li> <li> <p>Search and discovery \u2013    Gitter's structure and interface makes it cumbersome to search for and    retrieve past messages, resulting in lost insights and repeated conversations.</p> </li> <li> <p>User interface \u2013    After the acquisition by Element, the user interface of Gitter has    experienced a severe decline, becoming more complicated, less intuitive and    user-friendly.</p> </li> <li> <p>Access mandate \u2013    The necessity for users to grant access to their GitHub accounts to use    Gitter posed an unnecessary access barrier and potential security concerns.</p> </li> </ol>"},{"location":"blog/2023/10/02/sunsetting-gitter-towards-efficient-community-engagement/#github-discussions","title":"GitHub Discussions","text":"<p>Thankfully, GitHub Discussions emerged and continues to evolve to be a much better alternative, eliminating many of Gitter's constraints and offering enhanced functionality:</p> <ol> <li> <p>Threaded conversations \u2013    GitHub Discussions supports structured, threaded conversations, ensuring    discussions are coherent, contextual, and easy to follow for everyone.</p> </li> <li> <p>Integration and linking \u2013    the platform facilitates seamless linking to other discussions, issues, code,    and much more, enriching conversations and providing comprehensive context.</p> </li> <li> <p>A unified platform \u2013    GitHub acts as a one-stop shop for support, allowing users to access varied    resources and support channels in one place, greatly improving user    experience.</p> </li> <li> <p>Discoverability \u2013    GitHub Discussions are easily searchable and allow for categorization,    preventing loss of valuable insights and fostering knowledge sharing.</p> </li> </ol>"},{"location":"blog/2023/10/02/sunsetting-gitter-towards-efficient-community-engagement/#conclusion","title":"Conclusion","text":"<p>Sunsetting Gitter is a leap towards creating more efficient, user-friendly, and enriched community interactions. By consolidating communication to GitHub Discussions, we seek to mitigate the fragmentation of information, ease the user journey, and fortify the bonds within our community.</p> <p>This concentrated approach enables us to provide consistent, fast and quality support to our users. In the past, the nature of queries raised on Gitter typically necessitated supplementary information or reproductions, prompting us to advise users to initiate a discussion subsequently. The shift to a centralized discussion forum is designed to simplify and accelerate this procedure, ensuring swift and efficient resolutions for our community. It is a testament to our ongoing commitment to support the community that helps Material for MkDocs flourish.</p> <p>We are confident that this streamlined approach will spur more fruitful discussions, innovative ideas, and collective growth, and we are excited to continue our journey with the unwavering support and active participation of our community.</p>"},{"location":"blog/2021/12/27/the-past-present-and-future/","title":"The past, present and future","text":"<p>2021 was a fantastic year for this project as we shipped many new awesome features, saw significant user growth and leveraged GitHub Sponsors to make the project sustainable.</p> <p>Today, together, MkDocs and Material for MkDocs are among the most popular options when it comes to choosing a static site generator and theme for your technical documentation project. Material for MkDocs ensures that your content is always perfectly presented to your audience, regardless of screen resolution or device capabilities. It has evolved to a framework for technical writing, offering many features, some of which are yet to be found in other static site generators. However, we're far from the end, as 2022 is going to bring some interesting new capabilities.</p> <p>This article showcases all features that were added in 2021 and gives an outlook on what's going to drop in 2022. Additionally, it provides some context on the history of the project.</p>"},{"location":"blog/2021/12/27/the-past-present-and-future/#a-little-history","title":"A little history","text":"<p>In 2015, albeit 10 years in the industry, I was still quite new in Open Source. I wanted to release my latest Open Source project protobluff, a zero-copy Protocol Buffers implementation for C, which I've created as part of my former startup. As the project has a significant degree of complexity, I quickly realized that I was in need of good user documentation.</p> <p>After evaluating static site generators in general and Hugo, Sphinx and MkDocs in particular, I quickly decided that MkDocs seemed a good choice, as it was specifically aimed at technical project documentation and easy to use. Unfortunately, all of the available themes looked dated and given that I'm a very visual person, I just couldn't convince myself to call it a day.</p> <p>I had to build a theme.</p> <p>Months later, in February 2016, I released the first version of Material for MkDocs (and with it, protobluff, the project I wanted to release in the first place), and it looked like this:</p> <p></p> <p>It was already fully responsive and overall, well, quite okayish, but barely customizable, as only the logo could be changed. Beyond that, it had no options: No color or navigation options, no instant loading, etc. The search was very rudimentary and only supported section titles:</p> <p></p> <p>It's important to know that at this point in time I've built Material for MkDocs for protobluff, the project I was really caring about. Almost 6 years later, nobody knows protobluff, but this little side project has taken off. If back in those days, you would've told me big organizations like AWS, Microsoft and CERN, as well as extremely popular Open Source projects like FastAPI and Kubernetes will be using this project in the future \u2013 I would've declared you insane.</p> <p>I still find the success of this project quite surprising, as I thought that themes exist in abundance and are very much a solved problem. There's no glory in themes, no stars to earn (remember that I was new in Open Source, so this was the metric I was optimizing for), as there are thousands and thousands of options. However, as the years progressed, I learned that execution matters: although Material for MkDocs solves a problem for which thousands of solutions exist, it excels in a specific niche, and that niche is to be known as technical project documentation.</p> <p>Today, this project is not only popular but funded by almost 300 individuals and organizations, resulting in a yearly budget of more than $50,000. This allows me to set aside enough time for the development of new features, bug fixing, stability improvement, issue triage and general support and still feels like a dream to me, as there are many failed stories of Open Source funding and people telling you: don't do Open Source, you'll be working for free.</p> <p>Making Open Source sustainable is, after all, possible in 2021.</p>"},{"location":"blog/2021/12/27/the-past-present-and-future/#2021-in-numbers","title":"2021 in numbers","text":"<p>2021 was an exciting year, as the project has seen significant growth.</p> <p>166k people visited the official documentation in 2021, totalling in 1,6m page views which is an increase of 83% when compared to 2020. The average visitor spends 1,5min on the site. While mobile phones make up 12% of visits, tablets only account for 0.6%. Visitors come from as many as 213 countries, which covers almost the whole world.</p>"},{"location":"blog/2021/12/27/the-past-present-and-future/#features","title":"Features","text":"<p>It's absolutely mind-blowing that 38 new features were added to Material for MkDocs throughout 2021 \u2013 that's a new feature every 9,6 days \u2013 which was only possible because of the constantly improving funding situation. Following is a list of all features shipped in alphabetical order, some of which are still exclusively available to sponsors as part of Insiders:</p> <ul> <li>Admonition inline blocks</li> <li>Advanced search highlighting</li> <li>Anchor tracking</li> <li>Back-to-top button</li> <li>Boosting pages in search</li> <li>Brand new search plugin</li> <li>Code annotations</li> <li>Code annotations: anchor links</li> <li>Code annotations: strip comments</li> <li>Code block titles</li> <li>Code block line anchors</li> <li>Color palette toggle</li> <li>Content tabs: improved support</li> <li>Content tabs: auto-linking</li> <li>Content tabs: animated indicator</li> <li>Cookie consent</li> <li>Custom admonition icons</li> <li>Dark mode support for images</li> <li>Dismissable announcement bar</li> <li>Excluding content from search</li> <li>Latest release tag</li> <li>Mermaid.js integration</li> <li>Navigation icons</li> <li>Remove generator notice</li> <li>Rich search previews</li> <li>Stay on page when switching versions</li> <li>Search highlighting</li> <li>Search sharing</li> <li>Search suggestions</li> <li>Section index pages</li> <li>Site language selection</li> <li>Social cards</li> <li>Sticky navigation tabs</li> <li>Tags with search integration</li> <li>Tokenizer with lookahead</li> <li>Versioning</li> <li>Version warning</li> <li>Was this page helpful?</li> </ul> <p>Additionally, a lot of bugs were fixed in the 1,000 commits that were pushed to the repository this year. The changelog includes a list of all fixes. Furthermore, a large amount of time was invested into refactoring the code base to keep it in good shape. While the <code>mkdocs-material</code> package was released 55 times, <code>mkdocs-material-insiders</code> was shipped 72 times.</p>"},{"location":"blog/2021/12/27/the-past-present-and-future/#funding","title":"Funding","text":"<p>In 2021, monthly funding increased from $1,050 in the beginning of January to more than $4,300 (Dec 27, 2021), totaling in a yearly budget of more than $50,000. Compared to last year, revenue from funding has increased by 617% \u2013 which is absolutely unbelievable:</p> <p></p> <p>I'm solely providing these numbers to fulfill the transparency pledge I'm giving to my awesome sponsors, and to show that it's possible to make existing Open Source projects sustainable by following a well-designed release strategy.</p> <p>You can learn about the strategy in the Insiders guide.</p>"},{"location":"blog/2021/12/27/the-past-present-and-future/#2022","title":"2022","text":"<p>Standing at the verge of the next year, it's safe to say that the project will continue to prosper and evolve, yielding many awesome features that will make technical writing more comfortable and flexible. Here's an excerpt of the features that will see the light of day in 2022:</p> <ul> <li> <p>Instant previews: instant previews will render a specific page section   inside a tooltip when hovering an internal link, which will allow to implement   things like glossaries. Further support for improving glossary functionality   will also be investigated.</p> </li> <li> <p>Text annotations: as a logical progression of code annotations which   were added in 2021, authors will be able to add annotations to plain text,   yielding excellent opportunities for side content. Of course, text annotations   will be as easy to use as code annotations.</p> </li> <li> <p>Navigation pruning: to optimize large documentation projects, Material   for MkDocs will introduce a new feature flag called <code>navigation.prune</code> that   will lead to significantly smaller HTML files for documentation projects with   huge navigation hierarchies.</p> </li> <li> <p>Navigation status badge: as an addition to the recently added   navigation icon support, a status will be attributable to   each page, allowing to mark a page in the navigation tree with an icon as    new or  deprecated.   Custom status types will also be supported.</p> </li> <li> <p>Card grids: as a further component in the toolkit of technical writing,   card grids will allow arranging content in grids, which is especially   useful for overview pages. They will allow to arrange arbitrary content,   including code blocks, admonitions, etc.</p> </li> <li> <p>Blog support: blogging support is still under investigation and expected   to be one of the major additions in 2022. Blogging will perfectly integrate   with writing documentation, allowing to use all components available in   Material for MkDocs.</p> </li> </ul> <p>This list is incomplete. Additionally, many new smaller features will be added next year, just as in 2021. You can follow @squidfunk on Twitter to stay updated.</p> <p>Happy new year! </p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#knowledge-base-for-cybersecurity","title":"Knowledge Base for Cybersecurity","text":""},{"location":"changelog/#1.0.0","title":"1.0.0 2024-07-22","text":"<ul> <li>\u6dfb\u52a0\u4e86\u5173\u4e8e\u7f51\u7edc\u5b89\u5168\u7684\u77e5\u8bc6\u5e93\u3002</li> </ul>"},{"location":"pentest/","title":"\u6e17\u900f\u6d4b\u8bd5","text":""},{"location":"pentest/ptes/","title":"\u6e17\u900f\u6d4b\u8bd5\u6267\u884c\u6807\u51c6","text":""},{"location":"pentest/ptes/01/","title":"Pre-engagement Interactions","text":""},{"location":"blog/archive/2023/","title":"2023","text":""},{"location":"blog/archive/2022/","title":"2022","text":""},{"location":"blog/archive/2021/","title":"2021","text":""},{"location":"blog/category/general/","title":"General","text":""},{"location":"blog/category/build/","title":"Build","text":""},{"location":"blog/category/performance/","title":"Performance","text":""},{"location":"blog/category/blog/","title":"Blog","text":""},{"location":"blog/category/search/","title":"Search","text":""}]}